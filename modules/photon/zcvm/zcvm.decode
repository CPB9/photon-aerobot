module zcvm

import clk::{TimePoint, Duration}
import powerfan::{Reg}

enum Slaves {
    PowerCom,
    PowerFan1,
    PowerFan2,
}

struct SlaveRunningState {
    #[ranges(default=1, min=1, max=1)]
    powerCom: bool,
    #[ranges(default=1, min=1, max=1)]
    powerFan1: bool,
    #[ranges(default=1, min=1, max=1)]
    powerFan2: bool,
    powerComLastTime: TimePoint,
    powerFan1LastTime: TimePoint,
    powerFan2LastTime: TimePoint,
}

enum ExcChannelId {
    None,
    Modem1,
    Modem2,
    Ethernet
}

struct ExcChannelState {
    id: ExcChannelId,
    bytesReceived: varuint,
    bytesSent: varuint
}

component {
    variables {
        slavesState: SlaveRunningState,
        altimeterAltitude: f32,
        currentChannel: ExcChannelId,
        excChannels: [ExcChannelState;3]
    }

    statuses {
        [slaveState, 1, true]: {slavesState.powerCom, slavesState.powerFan1, slavesState.powerFan2}
        [slaveLastTimes, 1, false]: {slavesState.powerComLastTime, slavesState.powerFan1LastTime, slavesState.powerFan2LastTime}
        [altimeter, 1, true]: {altimeterAltitude}
        [excState, 1, true]: {currentChannel, excChannels}
    }

    events {
        [slaveConnectionChanged, true]: {state: SlaveRunningState},
        [excChannelChanged, true]: {id: ExcChannelId}
    }

    impl {
        fn init()
        fn tick()
        fn updateSlaveMessageTime(slave: Slaves)
        fn canSendToChannel(id: ExcChannelId) -> bool
        fn setCurrentChannel(id: ExcChannelId)
        fn updateChannelStats(id: ExcChannelId, bytesSent: varuint, bytesReceived: varuint)
    }
}
