module zcvm

import clk::{TimePoint, Duration}
import powerfan::{Reg}
import powerfanproxy::{BldcId}

enum Slaves {
    PowerCom,
    PowerFan1,
    PowerFan2,
}

struct SlaveRunningState {
    #[ranges(default=1, min=1, max=1)]
    powerCom: bool,
    #[ranges(default=1, min=1, max=1)]
    powerFan1: bool,
    #[ranges(default=1, min=1, max=1)]
    powerFan2: bool,
    powerComLastTime: TimePoint,
    powerFan1LastTime: TimePoint,
    powerFan2LastTime: TimePoint,    
}

struct EngineRotation {
   dir1: u8,
   dir2: u8,
   dir3: u8,
   dir4: u8
}

component {
    variables {
        slavesState: SlaveRunningState,
        altimeterAltitude: f32,
        enginesRotation: EngineRotation
    }

    statuses {
        [slaveState, 1, true]: {slavesState.powerCom, slavesState.powerFan1, slavesState.powerFan2}
        [slaveLastTimes, 1, false]: {slavesState.powerComLastTime, slavesState.powerFan1LastTime, slavesState.powerFan2LastTime}
        [altimeter, 1, true]: {altimeterAltitude}
        [enginesRotation, 1, false]: {enginesRotation}
    }
    
    events {
        [slaveConnectionChanged, true]: {state: SlaveRunningState},
        [restoreBldcReg, true]: {bldc: BldcId, reg: Reg, value: u8},
    }
    
    impl {
        fn init()
        fn tick()
        fn updateSlaveMessageTime(slave: Slaves)
    }
    
    commands {
        fn reverseEngineRotation(id: BldcId)
        fn setEnginesRotation(dirs: EngineRotation)
    }
    
    autosave {
        enginesRotation.dir1, enginesRotation.dir2, enginesRotation.dir3, enginesRotation.dir4,
    }
}
