module ximea

type Integer = varint;
type Enum = varint;
type Float = f32;
type Boolean = bool;
type Command = varint;
type String = &[char; 512];

enum XI_DOWNSAMPLING_VALUE {
    XI_DWN_1x1 = 1,
    XI_DWN_2x2 = 2,
    XI_DWN_3x3 = 3,
    XI_DWN_4x4 = 4,
    XI_DWN_5x5 = 5,
    XI_DWN_6x6 = 6,
    XI_DWN_7x7 = 7,
    XI_DWN_8x8 = 8,
    XI_DWN_9x9 = 9,
    XI_DWN_10x10 = 10,
    XI_DWN_16x16 = 16,
}

enum XI_TEST_PATTERN_GENERATOR {
    XI_TESTPAT_GEN_SENSOR = 0,
    XI_TESTPAT_GEN_FPGA = 1,
}

enum XI_TEST_PATTERN {
    XI_TESTPAT_OFF = 0,
    XI_TESTPAT_BLACK = 1,
    XI_TESTPAT_WHITE = 2,
    XI_TESTPAT_GREY_HORIZ_RAMP = 3,
    XI_TESTPAT_GREY_VERT_RAMP = 4,
    XI_TESTPAT_GREY_HORIZ_RAMP_MOVING = 5,
    XI_TESTPAT_GREY_VERT_RAMP_MOVING = 6,
    XI_TESTPAT_HORIZ_LINE_MOVING = 7,
    XI_TESTPAT_VERT_LINE_MOVING = 8,
    XI_TESTPAT_COLOR_BAR = 9,
    XI_TESTPAT_FRAME_COUNTER = 10,
    XI_TESTPAT_DEVICE_SPEC_COUNTER = 11,
}

enum XI_DEC_PATTERN {
    XI_DEC_MONO = 1,
    XI_DEC_BAYER = 2,
}

enum XI_BIN_PATTERN {
    XI_BIN_MONO = 1,
    XI_BIN_BAYER = 2,
}

enum XI_BIN_SELECTOR {
    XI_BIN_SELECT_SENSOR = 0,
    XI_BIN_SELECT_DEVICE_FPGA = 1,
    XI_BIN_SELECT_HOST_CPU = 2,
}

enum XI_BIN_MODE {
    XI_BIN_MODE_SUM = 0,
    XI_BIN_MODE_AVERAGE = 1,
}

enum XI_DEC_SELECTOR {
    XI_DEC_SELECT_SENSOR = 0,
    XI_DEC_SELECT_DEVICE_FPGA = 1,
    XI_DEC_SELECT_HOST_CPU = 2,
}

enum XI_SENSOR_TAP_CNT {
    XI_TAP_CNT_1 = 1,
    XI_TAP_CNT_2 = 2,
    XI_TAP_CNT_4 = 4,
}

enum XI_BIT_DEPTH {
    XI_BPP_8 = 8,
    XI_BPP_9 = 9,
    XI_BPP_10 = 10,
    XI_BPP_11 = 11,
    XI_BPP_12 = 12,
    XI_BPP_14 = 14,
    XI_BPP_16 = 16,
}

enum XI_DEBUG_LEVEL {
    XI_DL_DETAIL = 0,
    XI_DL_TRACE = 1,
    XI_DL_WARNING = 2,
    XI_DL_ERROR = 3,
    XI_DL_FATAL = 4,
    XI_DL_DISABLED = 100,
}

enum XI_IMG_FORMAT {
    XI_MONO8 = 0,
    XI_MONO16 = 1,
    XI_RGB24 = 2,
    XI_RGB32 = 3,
    XI_RGB_PLANAR = 4,
    XI_RAW8 = 5,
    XI_RAW16 = 6,
    XI_FRM_TRANSPORT_DATA = 7,
    XI_RGB48 = 8,
    XI_RGB64 = 9,
    XI_RGB16_PLANAR = 10,
    XI_RAW8X2 = 11,
    XI_RAW8X4 = 12,
    XI_RAW16X2 = 13,
    XI_RAW16X4 = 14,
}

enum XI_COLOR_FILTER_ARRAY {
    XI_CFA_NONE = 0,
    XI_CFA_BAYER_RGGB = 1,
    XI_CFA_CMYG = 2,
    XI_CFA_RGR = 3,
    XI_CFA_BAYER_BGGR = 4,
    XI_CFA_BAYER_GRBG = 5,
    XI_CFA_BAYER_GBRG = 6,
}

enum XI_BP {
    XI_BP_UNSAFE = 0,
    XI_BP_SAFE = 1,
}

enum XI_TRG_SOURCE {
    XI_TRG_OFF = 0,
    XI_TRG_EDGE_RISING = 1,
    XI_TRG_EDGE_FALLING = 2,
    XI_TRG_SOFTWARE = 3,
    XI_TRG_LEVEL_HIGH = 4,
    XI_TRG_LEVEL_LOW = 5,
}

enum XI_TRG_SELECTOR {
    XI_TRG_SEL_FRAME_START = 0,
    XI_TRG_SEL_EXPOSURE_ACTIVE = 1,
    XI_TRG_SEL_FRAME_BURST_START = 2,
    XI_TRG_SEL_FRAME_BURST_ACTIVE = 3,
    XI_TRG_SEL_MULTIPLE_EXPOSURES = 4,
    XI_TRG_SEL_EXPOSURE_START = 5,
    XI_TRG_SEL_MULTI_SLOPE_PHASE_CHANGE = 6,
    XI_TRG_SEL_ACQUISITION_START = 7,
}

enum XI_TRG_OVERLAP {
    XI_TRG_OVERLAP_OFF = 0,
    XI_TRG_OVERLAP_READ_OUT = 1,
    XI_TRG_OVERLAP_PREV_FRAME = 2,
}

enum XI_ACQ_TIMING_MODE {
    XI_ACQ_TIMING_MODE_FREE_RUN = 0,
    XI_ACQ_TIMING_MODE_FRAME_RATE = 1,
    XI_ACQ_TIMING_MODE_FRAME_RATE_LIMIT = 2,
}

enum XI_TRANSPORT_DATA_TARGET_MODE {
    XI_TRANSPORT_DATA_TARGET_CPU_RAM = 0,
    XI_TRANSPORT_DATA_TARGET_GPU_RAM = 1,
}

enum XI_GPI_SEL_CB {
    XI_GPI_SEL_CB_IN1 = 1,
    XI_GPI_SEL_CB_IN2 = 2,
    XI_GPI_SEL_CB_INOUT1 = 3,
    XI_GPI_SEL_CB_INOUT2 = 4,
    XI_GPI_SEL_CB_INOUT3 = 5,
    XI_GPI_SEL_CB_INOUT4 = 6,
}

enum XI_GPO_SEL_CB {
    XI_GPO_SEL_CB_OUT1 = 1,
    XI_GPO_SEL_CB_OUT2 = 2,
    XI_GPO_SEL_CB_INOUT1 = 3,
    XI_GPO_SEL_CB_INOUT2 = 4,
    XI_GPO_SEL_CB_INOUT3 = 5,
    XI_GPO_SEL_CB_INOUT4 = 6,
}

enum XI_GPI_MODE {
    XI_GPI_OFF = 0,
    XI_GPI_TRIGGER = 1,
    XI_GPI_EXT_EVENT = 2,
}

enum XI_GPI_SELECTOR {
    XI_GPI_PORT1 = 1,
    XI_GPI_PORT2 = 2,
    XI_GPI_PORT3 = 3,
    XI_GPI_PORT4 = 4,
    XI_GPI_PORT5 = 5,
    XI_GPI_PORT6 = 6,
}

enum XI_GPO_MODE {
    XI_GPO_OFF = 0,
    XI_GPO_ON = 1,
    XI_GPO_FRAME_ACTIVE = 2,
    XI_GPO_FRAME_ACTIVE_NEG = 3,
    XI_GPO_EXPOSURE_ACTIVE = 4,
    XI_GPO_EXPOSURE_ACTIVE_NEG = 5,
    XI_GPO_FRAME_TRIGGER_WAIT = 6,
    XI_GPO_FRAME_TRIGGER_WAIT_NEG = 7,
    XI_GPO_EXPOSURE_PULSE = 8,
    XI_GPO_EXPOSURE_PULSE_NEG = 9,
    XI_GPO_BUSY = 10,
    XI_GPO_BUSY_NEG = 11,
    XI_GPO_HIGH_IMPEDANCE = 12,
    XI_GPO_FRAME_BUFFER_OVERFLOW = 13,
}

enum XI_GPO_SELECTOR {
    XI_GPO_PORT1 = 1,
    XI_GPO_PORT2 = 2,
    XI_GPO_PORT3 = 3,
    XI_GPO_PORT4 = 4,
    XI_GPO_PORT5 = 5,
    XI_GPO_PORT6 = 6,
}

enum XI_LED_MODE {
    XI_LED_HEARTBEAT = 0,
    XI_LED_TRIGGER_ACTIVE = 1,
    XI_LED_EXT_EVENT_ACTIVE = 2,
    XI_LED_LINK = 3,
    XI_LED_ACQUISITION = 4,
    XI_LED_EXPOSURE_ACTIVE = 5,
    XI_LED_FRAME_ACTIVE = 6,
    XI_LED_OFF = 7,
    XI_LED_ON = 8,
    XI_LED_BLINK = 9,
}

enum XI_LED_SELECTOR {
    XI_LED_SEL1 = 1,
    XI_LED_SEL2 = 2,
    XI_LED_SEL3 = 3,
    XI_LED_SEL4 = 4,
}

enum XI_COUNTER_SELECTOR {
    XI_CNT_SEL_TRANSPORT_SKIPPED_FRAMES = 0,
    XI_CNT_SEL_API_SKIPPED_FRAMES = 1,
    XI_CNT_SEL_TRANSPORT_TRANSFERRED_FRAMES = 2,
    XI_CNT_SEL_FRAME_MISSED_TRIGGER_DUETO_OVERLAP = 3,
    XI_CNT_SEL_FRAME_MISSED_TRIGGER_DUETO_FRAME_BUFFER_OVR = 4,
    XI_CNT_SEL_FRAME_BUFFER_OVERFLOW = 5,
}

enum XI_TS_RST_MODE {
    XI_TS_RST_ARM_ONCE = 0,
    XI_TS_RST_ARM_PERSIST = 1,
}

enum XI_TS_RST_SOURCE {
    XI_TS_RST_OFF = 0,
    XI_TS_RST_SRC_GPI_1 = 1,
    XI_TS_RST_SRC_GPI_2 = 2,
    XI_TS_RST_SRC_GPI_3 = 3,
    XI_TS_RST_SRC_GPI_4 = 4,
    XI_TS_RST_SRC_GPI_1_INV = 5,
    XI_TS_RST_SRC_GPI_2_INV = 6,
    XI_TS_RST_SRC_GPI_3_INV = 7,
    XI_TS_RST_SRC_GPI_4_INV = 8,
    XI_TS_RST_SRC_GPO_1 = 9,
    XI_TS_RST_SRC_GPO_2 = 10,
    XI_TS_RST_SRC_GPO_3 = 11,
    XI_TS_RST_SRC_GPO_4 = 12,
    XI_TS_RST_SRC_GPO_1_INV = 13,
    XI_TS_RST_SRC_GPO_2_INV = 14,
    XI_TS_RST_SRC_GPO_3_INV = 15,
    XI_TS_RST_SRC_GPO_4_INV = 16,
    XI_TS_RST_SRC_TRIGGER = 17,
    XI_TS_RST_SRC_TRIGGER_INV = 18,
    XI_TS_RST_SRC_SW = 19,
    XI_TS_RST_SRC_EXPACTIVE = 20,
    XI_TS_RST_SRC_EXPACTIVE_INV = 21,
    XI_TS_RST_SRC_FVAL = 22,
    XI_TS_RST_SRC_FVAL_INV = 23,
}

enum XI_SWITCH {
    XI_OFF = 0,
    XI_ON = 1,
}

enum XI_TEMP_SELECTOR {
    XI_TEMP_IMAGE_SENSOR_DIE_RAW = 0,
    XI_TEMP_IMAGE_SENSOR_DIE = 1,
    XI_TEMP_SENSOR_BOARD = 2,
    XI_TEMP_INTERFACE_BOARD = 3,
    XI_TEMP_FRONT_HOUSING = 4,
    XI_TEMP_REAR_HOUSING = 5,
    XI_TEMP_TEC1_COLD = 6,
    XI_TEMP_TEC1_HOT = 7,
}

enum XI_TEMP_CTRL_MODE_SELECTOR {
    XI_TEMP_CTRL_MODE_OFF = 0,
    XI_TEMP_CTRL_MODE_AUTO = 1,
    XI_TEMP_CTRL_MODE_MANUAL = 2,
}

enum XI_TEMP_ELEMENT_SELECTOR {
    XI_TEMP_ELEM_TEC1 = 11,
    XI_TEMP_ELEM_TEC2 = 12,
    XI_TEMP_ELEM_FAN1 = 31,
    XI_TEMP_ELEM_FAN1_THRS_TEMP = 32,
}

enum XI_OUTPUT_DATA_PACKING_TYPE {
    XI_DATA_PACK_XI_GROUPING = 0,
    XI_DATA_PACK_PFNC_LSB_PACKING = 1,
}

enum XI_DOWNSAMPLING_TYPE {
    XI_BINNING = 0,
    XI_SKIPPING = 1,
}

enum XI_IMAGE_CORRECTION_SELECTOR {
    XI_CORRECTION_TYPE_SELECTOR = 0,
    XI_DEFECT_ID = 1,
    XI_DEFECTS_COUNT_BY_TYPE = 2,
    XI_DEFECT_TYPE = 3,
    XI_DEFECT_SUB_TYPE = 4,
    XI_DEFECT_POS_X = 5,
    XI_DEFECT_POS_Y = 6,
    XI_DEFECT_CMD_ADD = 7,
    XI_DEFECT_CMD_DELETE = 8,
    XI_DEFECT_CMD_APPLY_CHANGES = 9,
    XI_DEFECT_CMD_LIST_CLEAR = 10,
    XI_DEFECT_CMD_LISTS_CLEAR = 11,
    XI_DEFECT_CMD_SAVE = 12,
    XI_CORRECTION_TYPE_ENABLED = 13,
    XI_DEFECT_ID_BY_TYPE = 14,
    XI_LIST_ID = 15,
    XI_DEFECT_CMD_APPLY_CHANGES_ALL = 16,
    XI_LIST_STATUS = 17,
    XI_IMG_COR_TAP_SELECTOR = 64,
    XI_IMG_COR_GAIN_TUNE = 65,
    XI_IMG_COR_OFFSET_TUNE = 66,
}

enum XI_TYPE_CORRECTION_SELECTOR {
    XI_CORR_TYPE_SENSOR_DEFECTS_FACTORY = 0,
    XI_CORR_TYPE_SENSOR_COLUMN_FPN = 1,
    XI_CORR_TYPE_SENSOR_ADC_BLO = 2,
    XI_CORR_TYPE_SENSOR_ROW_FPN = 3,
    XI_CORR_TYPE_SENSOR_DEFECTS_USER0 = 4,
    XI_CORR_TYPE_SENSOR_CHANNELS_TUNE = 5,
}

enum XI_IMAGE_DEFECT_TYPE {
    XI_IMAGE_DEFECT_TYPE_PIXEL = 0,
    XI_IMAGE_DEFECT_TYPE_COLUMN = 1,
    XI_IMAGE_DEFECT_TYPE_ROW = 2,
}

enum XI_IMAGE_DEFECT_SUB_TYPE {
    XI_IMAGE_DEFECT_SUB_TYPE_DARK = 0,
    XI_IMAGE_DEFECT_SUB_TYPE_BRIGHT = 1,
    XI_IMAGE_DEFECT_SUB_TYPE_HOT = 2,
}

enum XI_GAIN_SELECTOR_TYPE {
    XI_GAIN_SELECTOR_ALL = 0,
    XI_GAIN_SELECTOR_ANALOG_ALL = 1,
    XI_GAIN_SELECTOR_DIGITAL_ALL = 2,
    XI_GAIN_SELECTOR_ANALOG_TAP1 = 3,
    XI_GAIN_SELECTOR_ANALOG_TAP2 = 4,
    XI_GAIN_SELECTOR_ANALOG_TAP3 = 5,
    XI_GAIN_SELECTOR_ANALOG_TAP4 = 6,
}

enum XI_SHUTTER_TYPE {
    XI_SHUTTER_GLOBAL = 0,
    XI_SHUTTER_ROLLING = 1,
    XI_SHUTTER_GLOBAL_RESET_RELEASE = 2,
}

enum XI_CMS_MODE {
    XI_CMS_DIS = 0,
    XI_CMS_EN = 1,
    XI_CMS_EN_FAST = 2,
}

enum XI_CMS_INTENT {
    XI_CMS_INTENT_PERCEPTUAL = 0,
    XI_CMS_INTENT_RELATIVE_COLORIMETRIC = 1,
    XI_CMS_INTENT_SATURATION = 2,
    XI_CMS_INTENT_ABSOLUTE_COLORIMETRIC = 3,
}

enum XI_OPEN_BY {
    XI_OPEN_BY_INST_PATH = 0,
    XI_OPEN_BY_SN = 1,
    XI_OPEN_BY_USER_ID = 2,
    XI_OPEN_BY_LOC_PATH = 3,
}

enum XI_LENS_FEATURE {
    XI_LENS_FEATURE_MOTORIZED_FOCUS_SWITCH = 1,
    XI_LENS_FEATURE_MOTORIZED_FOCUS_BOUNDED = 2,
    XI_LENS_FEATURE_MOTORIZED_FOCUS_CALIBRATION = 3,
    XI_LENS_FEATURE_IMAGE_STABILIZATION_ENABLED = 4,
    XI_LENS_FEATURE_IMAGE_STABILIZATION_SWITCH_STATUS = 5,
    XI_LENS_FEATURE_IMAGE_ZOOM_SUPPORTED = 6,
}

enum XI_SENSOR_FEATURE_SELECTOR {
    XI_SENSOR_FEATURE_ZEROROT_ENABLE = 0,
    XI_SENSOR_FEATURE_BLACK_LEVEL_CLAMP = 1,
    XI_SENSOR_FEATURE_MD_FPGA_DIGITAL_GAIN_DISABLE = 2,
    XI_SENSOR_FEATURE_ACQUISITION_RUNNING = 3,
}

enum XI_EXT_FEATURE_SELECTOR {
    XI_EXT_FEATURE_SEL_SIMULATOR_GENERATOR_FRAME_LOST_PERIOD_MIN = 1,
    XI_EXT_FEATURE_SEL_SIMULATOR_GENERATOR_FRAME_LOST_PERIOD_MAX = 2,
    XI_EXT_FEATURE_SEL_SIMULATOR_IMAGE_DATA_FORMAT = 3,
    XI_EXT_FEATURE_SEL_BANDWIDTH_MEASUREMENT_TIME_SECONDS = 4,
    XI_EXT_FEATURE_SEL_IMAGE_INTENSIFIER_VOLTAGE = 5,
    XI_EXT_FEATURE_SEL_TRIG_FRAME = 6,
    XI_EXT_FEATURE_SEL_IMAGE_OVERSAMPLING = 7,
    XI_EXT_FEATURE_SEL_APPLY_DATA_FINAL = 8,
    XI_EXT_FEATURE_SEL_FAN_RPM = 9,
    XI_EXT_FEATURE_SEL_DITHERING_HOST = 10,
    XI_EXT_FEATURE_SEL_DITHERING_DEVICE = 11,
    XI_EXT_FEATURE_SEL_FAN_THR_TEMP = 12,
}

enum XI_DEVICE_UNIT_SELECTOR {
    XI_DEVICE_UNIT_SENSOR1 = 0,
    XI_DEVICE_UNIT_FPGA1 = 1,
    XI_DEVICE_UNIT_SAL = 2,
    XI_DEVICE_UNIT_DAL = 3,
    XI_DEVICE_UNIT_SCM = 4,
    XI_DEVICE_UNIT_FGENTL = 5,
    XI_DEVICE_UNIT_MCU1 = 6,
    XI_DEVICE_UNIT_MCU2 = 7,
    XI_DEVICE_UNIT_CHF = 8,
}

enum XI_SENSOR_MODE {
    XI_SENS_MD0 = 0,
    XI_SENS_MD1 = 1,
    XI_SENS_MD2 = 2,
    XI_SENS_MD3 = 3,
    XI_SENS_MD4 = 4,
    XI_SENS_MD5 = 5,
    XI_SENS_MD6 = 6,
    XI_SENS_MD7 = 7,
    XI_SENS_MD8 = 8,
    XI_SENS_MD9 = 9,
    XI_SENS_MD10 = 10,
    XI_SENS_MD11 = 11,
    XI_SENS_MD12 = 12,
    XI_SENS_MD13 = 13,
    XI_SENS_MD14 = 14,
    XI_SENS_MD15 = 15,
}

enum XI_SENSOR_OUTPUT_CHANNEL_COUNT {
    XI_CHANN_CNT2 = 2,
    XI_CHANN_CNT4 = 4,
    XI_CHANN_CNT8 = 8,
    XI_CHANN_CNT16 = 16,
    XI_CHANN_CNT32 = 32,
}

enum XI_SENS_DEFFECTS_CORR_LIST_SELECTOR {
    XI_SENS_DEFFECTS_CORR_LIST_SEL_FACTORY = 0,
    XI_SENS_DEFFECTS_CORR_LIST_SEL_USER0 = 1,
}

enum XI_ACQUISITION_STATUS_SELECTOR {
    XI_ACQUISITION_STATUS_ACQ_ACTIVE = 0,
}

enum XI_GenTL_Image_Format_e {
    XI_GenTL_Image_Format_Mono8 = 0x01080001,
}

struct Fields {
    ///Exposure time in microseconds
    exposure: Integer,
    ///Sets the number of times of exposure in one frame.
    exposure_burst_count: Integer,
    ///Gain selector for parameter Gain allows to select different type of gains.
    gain_selector: XI_GAIN_SELECTOR_TYPE,
    ///Gain in dB
    gain: Float,
    ///Change image resolution by binning or skipping.
    downsampling: XI_DOWNSAMPLING_VALUE,
    ///Change image downsampling type.
    downsampling_type: XI_DOWNSAMPLING_TYPE,
    ///Selects which test pattern generator is controlled by the TestPattern feature.
    test_pattern_generator_selector: XI_TEST_PATTERN_GENERATOR,
    ///Selects which test pattern type is generated by the selected generator.
    test_pattern: XI_TEST_PATTERN,
    ///Output data format.
    imgdataformat: XI_IMG_FORMAT,
    ///Change sensor shutter type(CMOS sensor).
    shutter_type: XI_SHUTTER_TYPE,
    ///Number of taps
    sensor_taps: XI_SENSOR_TAP_CNT,
    ///Automatic exposure/gain
    aeag: Boolean,
    ///Automatic exposure/gain ROI offset X
    aeag_roi_offset_x: Integer,
    ///Automatic exposure/gain ROI offset Y
    aeag_roi_offset_y: Integer,
    ///Automatic exposure/gain ROI Width
    aeag_roi_width: Integer,
    ///Automatic exposure/gain ROI Height
    aeag_roi_height: Integer,
    ///Selector of list used by Sensor Defects Correction parameter
    bpc_list_selector: XI_SENS_DEFFECTS_CORR_LIST_SELECTOR,
    ///Correction of sensor defects (pixels, columns, rows) enable/disable
    bpc: Boolean,
    ///Automatic white balance
    auto_wb: Boolean,
    ///Calculates White Balance(xiGetImage function must be called)
    manual_wb: Command,
    ///White balance red coefficient
    wb_kr: Float,
    ///White balance green coefficient
    wb_kg: Float,
    ///White balance blue coefficient
    wb_kb: Float,
    ///Width of the Image provided by the device (in pixels).
    width: Integer,
    ///Height of the Image provided by the device (in pixels).
    height: Integer,
    ///Horizontal offset from the origin to the area of interest (in pixels).
    offsetX: Integer,
    ///Vertical offset from the origin to the area of interest (in pixels).
    offsetY: Integer,
    ///Selects Region in Multiple ROI which parameters are set by width, height, ... ,region mode
    region_selector: Integer,
    ///Activates/deactivates Region selected by Region Selector
    region_mode: Integer,
    ///Horizontal flip enable
    horizontal_flip: Boolean,
    ///Vertical flip enable
    vertical_flip: Boolean,
    ///Image flat field correction
    ffc: Boolean,
    ///Binning engine selector.
    binning_selector: XI_BIN_SELECTOR,
    ///Sets the mode to use to combine vertical pixel together.
    binning_vertical_mode: XI_BIN_MODE,
    ///Vertical Binning - number of vertical photo-sensitive cells to combine together.
    binning_vertical: Integer,
    ///Sets the mode to use to combine horizontal pixel together.
    binning_horizontal_mode: XI_BIN_MODE,
    ///Horizontal Binning - number of horizontal photo-sensitive cells to combine together.
    binning_horizontal: Integer,
    ///Binning horizontal pattern type.
    binning_horizontal_pattern: XI_BIN_PATTERN,
    ///Binning vertical pattern type.
    binning_vertical_pattern: XI_BIN_PATTERN,
    ///Decimation engine selector.
    decimation_selector: XI_DEC_SELECTOR,
    ///Vertical Decimation - vertical sub-sampling of the image - reduces the vertical resolution of the image by the specified vertical decimation factor.
    decimation_vertical: Integer,
    ///Horizontal Decimation - horizontal sub-sampling of the image - reduces the horizontal resolution of the image by the specified vertical decimation factor.
    decimation_horizontal: Integer,
    ///Decimation horizontal pattern type.
    decimation_horizontal_pattern: XI_DEC_PATTERN,
    ///Decimation vertical pattern type.
    decimation_vertical_pattern: XI_DEC_PATTERN,
    ///Exposure priority (0.8 - exposure 80%, gain 20%).
    exp_priority: Float,
    ///Maximum limit of gain in AEAG procedure
    ag_max_limit: Float,
    ///Maximum time (us) used for exposure in AEAG procedure
    ae_max_limit: Integer,
    ///Average intensity of output signal AEAG should achieve(in %)
    aeag_level: Integer,
    ///Set/get bandwidth(datarate)(in Megabits)
    limit_bandwidth: Integer,
    ///Bandwidth limit enabled
    limit_bandwidth_mode: XI_SWITCH,
    ///Image sensor line period in us
    sensor_line_period: Float,
    ///Sensor output data bit depth.
    sensor_bit_depth: XI_BIT_DEPTH,
    ///Device output data bit depth.
    output_bit_depth: XI_BIT_DEPTH,
    ///bitdepth of data returned by function xiGetImage
    image_data_bit_depth: XI_BIT_DEPTH,
    ///Device output data packing (or grouping) enabled. Packing could be enabled if output_data_bit_depth > 8 and packing capability is available.
    output_bit_packing: Boolean,
    ///Data packing type. Some cameras supports only specific packing type.
    output_bit_packing_type: XI_OUTPUT_DATA_PACKING_TYPE,
    ///Returns 1 for cameras that support cooling.
    iscooled: Boolean,
    ///Temperature control mode.
    cooling: XI_TEMP_CTRL_MODE_SELECTOR,
    ///Set sensor target temperature for cooling.
    target_temp: Float,
    ///Selector of mechanical point where thermometer is located.
    temp_selector: XI_TEMP_SELECTOR,
    ///Camera temperature (selected by XI_PRM_TEMP_SELECTOR)
    temp: Float,
    ///Temperature control mode.
    device_temperature_ctrl_mode: XI_TEMP_CTRL_MODE_SELECTOR,
    ///Camera sensor temperature
    chip_temp: Float,
    ///Camera housing tepmerature
    hous_temp: Float,
    ///Camera housing back side tepmerature
    hous_back_side_temp: Float,
    ///Camera sensor board temperature
    sensor_board_temp: Float,
    ///Temperature element selector (TEC(Peltier), Fan).
    device_temperature_element_sel: XI_TEMP_ELEMENT_SELECTOR,
    ///Temperature element value in percents of full control range
    device_temperature_element_val: Float,
    ///Mode of color management system.
    cms: XI_CMS_MODE,
    ///Intent of color management system.
    cms_intent: XI_CMS_INTENT,
    ///Enable applying of CMS profiles to xiGetImage (see XI_PRM_INPUT_CMS_PROFILE, XI_PRM_OUTPUT_CMS_PROFILE).
    apply_cms: Boolean,
    ///Returns 1 for color cameras.
    iscolor: Boolean,
    ///Returns color filter array type of RAW data.
    cfa: XI_COLOR_FILTER_ARRAY,
    ///Luminosity gamma
    gammaY: Float,
    ///Chromaticity gamma
    gammaC: Float,
    ///Sharpness Strenght
    sharpness: Float,
    ///Color Correction Matrix element [0][0]
    ccMTX00: Float,
    ///Color Correction Matrix element [0][1]
    ccMTX01: Float,
    ///Color Correction Matrix element [0][2]
    ccMTX02: Float,
    ///Color Correction Matrix element [0][3]
    ccMTX03: Float,
    ///Color Correction Matrix element [1][0]
    ccMTX10: Float,
    ///Color Correction Matrix element [1][1]
    ccMTX11: Float,
    ///Color Correction Matrix element [1][2]
    ccMTX12: Float,
    ///Color Correction Matrix element [1][3]
    ccMTX13: Float,
    ///Color Correction Matrix element [2][0]
    ccMTX20: Float,
    ///Color Correction Matrix element [2][1]
    ccMTX21: Float,
    ///Color Correction Matrix element [2][2]
    ccMTX22: Float,
    ///Color Correction Matrix element [2][3]
    ccMTX23: Float,
    ///Color Correction Matrix element [3][0]
    ccMTX30: Float,
    ///Color Correction Matrix element [3][1]
    ccMTX31: Float,
    ///Color Correction Matrix element [3][2]
    ccMTX32: Float,
    ///Color Correction Matrix element [3][3]
    ccMTX33: Float,
    ///Set default Color Correction Matrix
    defccMTX: Command,
    ///Defines source of trigger.
    trigger_source: XI_TRG_SOURCE,
    ///Generates an internal trigger. XI_PRM_TRG_SOURCE must be set to TRG_SOFTWARE.
    trigger_software: Command,
    ///Selects the type of trigger.
    trigger_selector: XI_TRG_SELECTOR,
    ///The mode of Trigger Overlap. This influences of trigger acception/rejection policy
    trigger_overlap: XI_TRG_OVERLAP,
    ///Sets number of frames acquired by burst. This burst is used only if trigger is set to FrameBurstStart
    acq_frame_burst_count: Integer,
    ///Selects GPI
    gpi_selector: XI_GPI_SELECTOR,
    ///Defines GPI functionality
    gpi_mode: XI_GPI_MODE,
    ///GPI level
    gpi_level: Integer,
    ///Selects GPO
    gpo_selector: XI_GPO_SELECTOR,
    ///Defines GPO functionality
    gpo_mode: XI_GPO_MODE,
    ///Selects LED
    led_selector: XI_LED_SELECTOR,
    ///Defines LED functionality
    led_mode: XI_LED_MODE,
    ///Enable/Disable debounce to selected GPI
    dbnc_en: Boolean,
    ///Debounce time (x * 10us)
    dbnc_t0: Integer,
    ///Debounce time (x * 10us)
    dbnc_t1: Integer,
    ///Debounce polarity (pol = 1 t0 - falling edge, t1 - rising edge)
    dbnc_pol: Integer,
    ///Status of lens control interface. This shall be set to XI_ON before any Lens operations.
    lens_mode: Boolean,
    ///Current lens aperture value in stops. Examples: 2.8, 4, 5.6, 8, 11
    lens_aperture_value: Float,
    ///Lens current focus movement value to be used by XI_PRM_LENS_FOCUS_MOVE in motor steps.
    lens_focus_movement_value: Integer,
    ///Moves lens focus motor by steps set in XI_PRM_LENS_FOCUS_MOVEMENT_VALUE.
    lens_focus_move: Command,
    ///Lens focus distance in cm.
    lens_focus_distance: Float,
    ///Lens focal distance in mm.
    lens_focal_length: Float,
    ///Selects the current feature which is accessible by XI_PRM_LENS_FEATURE.
    lens_feature_selector: XI_LENS_FEATURE,
    ///Allows access to lens feature value currently selected by XI_PRM_LENS_FEATURE_SELECTOR.
    lens_feature: Float,
    ///Return device model id
    device_model_id: Integer,
    ///Return device sensor model id
    sensor_model_id: Integer,
    ///User image data at image header to track parameters synchronization.
    image_user_data: Integer,
    ///The alpha channel of RGB32 output image format.
    imgdataformatrgb32alpha: Integer,
    ///Buffer size in bytes sufficient for output image returned by xiGetImage
    imgpayloadsize: Integer,
    ///Current format of pixels on transport layer.
    transport_pixel_format: XI_GenTL_Image_Format_e,
    ///Target selector for data - CPU RAM or GPU RAM
    transport_data_target: XI_TRANSPORT_DATA_TARGET_MODE,
    ///Sensor clock frequency in Hz.
    sensor_clock_freq_hz: Float,
    ///Sensor clock frequency index. Sensor with selected frequencies have possibility to set the frequency only by this index.
    sensor_clock_freq_index: Integer,
    ///Number of output channels from sensor used for data transfer.
    sensor_output_channel_count: XI_SENSOR_OUTPUT_CHANNEL_COUNT,
    ///Define framerate in Hz
    framerate: Float,
    ///Select counter
    counter_selector: XI_COUNTER_SELECTOR,
    ///Counter status
    counter_value: Integer,
    ///Type of sensor frames timing.
    acq_timing_mode: XI_ACQ_TIMING_MODE,
    ///Measure and return available interface bandwidth(int Megabits)
    available_bandwidth: Integer,
    ///Data move policy
    buffer_policy: XI_BP,
    ///Activates LUT.
    LUTEnable: Boolean,
    ///Control the index (offset) of the coefficient to access in the LUT.
    LUTIndex: Integer,
    ///Value at entry LUTIndex of the LUT
    LUTValue: Integer,
    ///Specifies the delay in microseconds (us) to apply after the trigger reception before activating it.
    trigger_delay: Integer,
    ///Defines how time stamp reset engine will be armed
    ts_rst_mode: XI_TS_RST_MODE,
    ///Defines which source will be used for timestamp reset. Writing this parameter will trigger settings of engine (arming)
    ts_rst_source: XI_TS_RST_SOURCE,
    ///Returns 1 if camera connected and works properly.
    isexist: Boolean,
    ///Acquisition buffer size in buffer_size_unit. Default bytes.
    acq_buffer_size: Integer,
    ///Acquisition buffer size unit in bytes. Default 1. E.g. Value 1024 means that buffer_size is in KiBytes
    acq_buffer_size_unit: Integer,
    ///Acquisition transport buffer size in bytes
    acq_transport_buffer_size: Integer,
    ///Acquisition transport packet size in bytes
    acq_transport_packet_size: Integer,
    ///Queue of field/frame buffers
    buffers_queue_size: Integer,
    ///Number of buffers to commit to low level
    acq_transport_buffer_commit: Integer,
    ///GetImage returns most recent frame
    recent_frame: Boolean,
    ///Resets the camera to default state.
    device_reset: Command,
    ///Correction of column FPN
    column_fpn_correction: XI_SWITCH,
    ///Correction of row FPN
    row_fpn_correction: XI_SWITCH,
    ///Select image correction function
    image_correction_selector: XI_IMAGE_CORRECTION_SELECTOR,
    ///Select image correction selected function value
    image_correction_value: Float,
    ///Current sensor mode. Allows to select sensor mode by one integer. Setting of this parameter affects: image dimensions and downsampling.
    sensor_mode: XI_SENSOR_MODE,
    ///Enable High Dynamic Range feature.
    hdr: Boolean,
    ///The number of kneepoints in the PWLR.
    hdr_kneepoint_count: Integer,
    ///position of first kneepoint(in % of XI_PRM_EXPOSURE)
    hdr_t1: Integer,
    ///position of second kneepoint (in % of XI_PRM_EXPOSURE)
    hdr_t2: Integer,
    ///value of first kneepoint (% of sensor saturation)
    hdr_kneepoint1: Integer,
    ///value of second kneepoint (% of sensor saturation)
    hdr_kneepoint2: Integer,
    ///Last image black level counts. Can be used for Offline processing to recall it.
    image_black_level: Integer,
    ///Set debug level
    debug_level: XI_DEBUG_LEVEL,
    ///Automatic bandwidth calculation,
    auto_bandwidth_calculation: Boolean,
    ///Enables (2015/FAPI) processing chain for MQ MU cameras
    new_process_chain_enable: Boolean,
    ///Enable enumeration of golden devices
    cam_enum_golden_enabled: Boolean,
    ///Resets USB device if started as bootloader
    reset_usb_if_bootloader: Boolean,
    ///Number of camera simulators to be available.
    cam_simulators_count: Integer,
    ///Camera sensor will not be initialized when 1=XI_ON is set.
    cam_sensor_init_disabled: Boolean,
    ///File number.
    ffs_file_id: Integer,
    ///Size of file.
    ffs_file_size: Integer,
    ///Size of free camera FFS.
    free_ffs_size: Integer,
    ///Size of used camera FFS.
    used_ffs_size: Integer,
    ///Setting of key enables file operations on some cameras.
    ffs_access_key: Integer,
    ///Selects the current feature which is accessible by XI_PRM_SENSOR_FEATURE_VALUE.
    sensor_feature_selector: XI_SENSOR_FEATURE_SELECTOR,
    ///Allows access to sensor feature value currently selected by XI_PRM_SENSOR_FEATURE_SELECTOR.
    sensor_feature_value: Integer,
    ///Selection of extended feature.
    ext_feature_selector: XI_EXT_FEATURE_SELECTOR,
    ///Extended feature value.
    ext_feature: Integer,
    ///Selects device unit.
    device_unit_selector: XI_DEVICE_UNIT_SELECTOR,
    ///Selects register of selected device unit(XI_PRM_DEVICE_UNIT_SELECTOR).
    device_unit_register_selector: Integer,
    ///Sets/gets register value of selected device unit(XI_PRM_DEVICE_UNIT_SELECTOR).
    device_unit_register_value: Integer,
    ///Selects the internal acquisition signal to read using XI_PRM_ACQUISITION_STATUS.
    acquisition_status_selector: XI_ACQUISITION_STATUS_SELECTOR,
    ///Acquisition status(True/False)
    acquisition_status: XI_SWITCH,
}


enum CameraState {
    Off,
    On,
    Img,
}

struct Camera {
    state: CameraState,
    basic: Fields,
}

enum CameraItem {
    Front         = 1,
    BiFrontLeft   = 2,
    BiFrontRight  = 3,
    BiBottomLeft  = 4,
    BiBottomRight = 5,
}

component {

    variables {
        front  : Camera,
        bi_front_left: Camera,
        bi_front_right: Camera,
        bi_bottom_left: Camera,
        bi_bottom_right: Camera,
    }

    statuses {
        [state,             1, true]: { front.state, bi_front_left.state, bi_front_right.state, bi_bottom_left.state, bi_bottom_right.state},
        [state_front,       1, true]: { front },
        [state_front_left,  1, true]: { bi_front_left   },
        [state_front_right, 1, true]: { bi_front_right  },
        [state_bottom_left, 1, true]: { bi_bottom_left  },
        [state_bottom_right,1, true]: { bi_bottom_right },
    }

    commands {
        fn updateInfo(cam: CameraItem)
        fn open(cam: CameraItem)
        fn close(cam: CameraItem)
        fn start(cam: CameraItem, number: varuint, timeout: varuint)
        fn stop(cam: CameraItem)

        ///Exposure time in microseconds
        fn set_exposure(cam: CameraItem, val: Integer)
        ///Sets the number of times of exposure in one frame.
        fn set_exposure_burst_count(cam: CameraItem, val: Integer)
        ///Gain selector for parameter Gain allows to select different type of gains.
        fn set_gain_selector(cam: CameraItem, val: XI_GAIN_SELECTOR_TYPE)
        ///Gain in dB
        fn set_gain(cam: CameraItem, val: Float)
        ///Change image resolution by binning or skipping.
        fn set_downsampling(cam: CameraItem, val: XI_DOWNSAMPLING_VALUE)
        ///Change image downsampling type.
        fn set_downsampling_type(cam: CameraItem, val: XI_DOWNSAMPLING_TYPE)
        ///Selects which test pattern generator is controlled by the TestPattern feature.
        fn set_test_pattern_generator_selector(cam: CameraItem, val: XI_TEST_PATTERN_GENERATOR)
        ///Selects which test pattern type is generated by the selected generator.
        fn set_test_pattern(cam: CameraItem, val: XI_TEST_PATTERN)
        ///Output data format.
        fn set_imgdataformat(cam: CameraItem, val: XI_IMG_FORMAT)
        ///Change sensor shutter type(CMOS sensor).
        fn set_shutter_type(cam: CameraItem, val: XI_SHUTTER_TYPE)
        ///Number of taps
        fn set_sensor_taps(cam: CameraItem, val: XI_SENSOR_TAP_CNT)
        ///Automatic exposure/gain
        fn set_aeag(cam: CameraItem, val: Boolean)
        ///Automatic exposure/gain ROI offset X
        fn set_aeag_roi_offset_x(cam: CameraItem, val: Integer)
        ///Automatic exposure/gain ROI offset Y
        fn set_aeag_roi_offset_y(cam: CameraItem, val: Integer)
        ///Automatic exposure/gain ROI Width
        fn set_aeag_roi_width(cam: CameraItem, val: Integer)
        ///Automatic exposure/gain ROI Height
        fn set_aeag_roi_height(cam: CameraItem, val: Integer)
        ///Selector of list used by Sensor Defects Correction parameter
        fn set_bpc_list_selector(cam: CameraItem, val: XI_SENS_DEFFECTS_CORR_LIST_SELECTOR)
        ///Sets/Gets sensor defects list in special text format
        ///Correction of sensor defects (pixels, columns, rows) enable/disable
        fn set_bpc(cam: CameraItem, val: Boolean)
        ///Automatic white balance
        fn set_auto_wb(cam: CameraItem, val: Boolean)
        ///Calculates White Balance(xiGetImage function must be called)
        fn set_manual_wb(cam: CameraItem, val: Command)
        ///White balance red coefficient
        fn set_wb_kr(cam: CameraItem, val: Float)
        ///White balance green coefficient
        fn set_wb_kg(cam: CameraItem, val: Float)
        ///White balance blue coefficient
        fn set_wb_kb(cam: CameraItem, val: Float)
        ///Width of the Image provided by the device (in pixels).
        fn set_width(cam: CameraItem, val: Integer)
        ///Height of the Image provided by the device (in pixels).
        fn set_height(cam: CameraItem, val: Integer)
        ///Horizontal offset from the origin to the area of interest (in pixels).
        fn set_offsetX(cam: CameraItem, val: Integer)
        ///Vertical offset from the origin to the area of interest (in pixels).
        fn set_offsetY(cam: CameraItem, val: Integer)
        ///Selects Region in Multiple ROI which parameters are set by width, height, ... ,region mode
        fn set_region_selector(cam: CameraItem, val: Integer)
        ///Activates/deactivates Region selected by Region Selector
        fn set_region_mode(cam: CameraItem, val: Integer)
        ///Horizontal flip enable
        fn set_horizontal_flip(cam: CameraItem, val: Boolean)
        ///Vertical flip enable
        fn set_vertical_flip(cam: CameraItem, val: Boolean)
        ///Image flat field correction
        fn set_ffc(cam: CameraItem, val: Boolean)
        ///Set name of file to be applied for FFC processor.
        ///Set name of file to be applied for FFC processor.
        ///Binning engine selector.
        fn set_binning_selector(cam: CameraItem, val: XI_BIN_SELECTOR)
        ///Sets the mode to use to combine vertical pixel together.
        fn set_binning_vertical_mode(cam: CameraItem, val: XI_BIN_MODE)
        ///Vertical Binning - number of vertical photo-sensitive cells to combine together.
        fn set_binning_vertical(cam: CameraItem, val: Integer)
        ///Sets the mode to use to combine horizontal pixel together.
        fn set_binning_horizontal_mode(cam: CameraItem, val: XI_BIN_MODE)
        ///Horizontal Binning - number of horizontal photo-sensitive cells to combine together.
        fn set_binning_horizontal(cam: CameraItem, val: Integer)
        ///Binning horizontal pattern type.
        fn set_binning_horizontal_pattern(cam: CameraItem, val: XI_BIN_PATTERN)
        ///Binning vertical pattern type.
        fn set_binning_vertical_pattern(cam: CameraItem, val: XI_BIN_PATTERN)
        ///Decimation engine selector.
        fn set_decimation_selector(cam: CameraItem, val: XI_DEC_SELECTOR)
        ///Vertical Decimation - vertical sub-sampling of the image - reduces the vertical resolution of the image by the specified vertical decimation factor.
        fn set_decimation_vertical(cam: CameraItem, val: Integer)
        ///Horizontal Decimation - horizontal sub-sampling of the image - reduces the horizontal resolution of the image by the specified vertical decimation factor.
        fn set_decimation_horizontal(cam: CameraItem, val: Integer)
        ///Decimation horizontal pattern type.
        fn set_decimation_horizontal_pattern(cam: CameraItem, val: XI_DEC_PATTERN)
        ///Decimation vertical pattern type.
        fn set_decimation_vertical_pattern(cam: CameraItem, val: XI_DEC_PATTERN)
        ///Exposure priority (0.8 - exposure 80%, gain 20%).
        fn set_exp_priority(cam: CameraItem, val: Float)
        ///Maximum limit of gain in AEAG procedure
        fn set_ag_max_limit(cam: CameraItem, val: Float)
        ///Maximum time (us) used for exposure in AEAG procedure
        fn set_ae_max_limit(cam: CameraItem, val: Integer)
        ///Average intensity of output signal AEAG should achieve(in %)
        fn set_aeag_level(cam: CameraItem, val: Integer)
        ///Set/get bandwidth(datarate)(in Megabits)
        fn set_limit_bandwidth(cam: CameraItem, val: Integer)
        ///Bandwidth limit enabled
        fn set_limit_bandwidth_mode(cam: CameraItem, val: XI_SWITCH)
        ///Image sensor line period in us
        fn set_sensor_line_period(cam: CameraItem, val: Float)
        ///Sensor output data bit depth.
        fn set_sensor_bit_depth(cam: CameraItem, val: XI_BIT_DEPTH)
        ///Device output data bit depth.
        fn set_output_bit_depth(cam: CameraItem, val: XI_BIT_DEPTH)
        ///bitdepth of data returned by function xiGetImage
        fn set_image_data_bit_depth(cam: CameraItem, val: XI_BIT_DEPTH)
        ///Device output data packing (or grouping) enabled. Packing could be enabled if output_data_bit_depth > 8 and packing capability is available.
        fn set_output_bit_packing(cam: CameraItem, val: Boolean)
        ///Data packing type. Some cameras supports only specific packing type.
        fn set_output_bit_packing_type(cam: CameraItem, val: XI_OUTPUT_DATA_PACKING_TYPE)
        ///Returns 1 for cameras that support cooling.
        fn set_iscooled(cam: CameraItem, val: Boolean)
        ///Temperature control mode.
        fn set_cooling(cam: CameraItem, val: XI_TEMP_CTRL_MODE_SELECTOR)
        ///Set sensor target temperature for cooling.
        fn set_target_temp(cam: CameraItem, val: Float)
        ///Selector of mechanical point where thermometer is located.
        fn set_temp_selector(cam: CameraItem, val: XI_TEMP_SELECTOR)
        ///Camera temperature (selected by XI_PRM_TEMP_SELECTOR)
        fn set_temp(cam: CameraItem, val: Float)
        ///Temperature control mode.
        fn set_device_temperature_ctrl_mode(cam: CameraItem, val: XI_TEMP_CTRL_MODE_SELECTOR)
        ///Camera sensor temperature
        fn set_chip_temp(cam: CameraItem, val: Float)
        ///Camera housing tepmerature
        fn set_hous_temp(cam: CameraItem, val: Float)
        ///Camera housing back side tepmerature
        fn set_hous_back_side_temp(cam: CameraItem, val: Float)
        ///Camera sensor board temperature
        fn set_sensor_board_temp(cam: CameraItem, val: Float)
        ///Temperature element selector (TEC(Peltier), Fan).
        fn set_device_temperature_element_sel(cam: CameraItem, val: XI_TEMP_ELEMENT_SELECTOR)
        ///Temperature element value in percents of full control range
        fn set_device_temperature_element_val(cam: CameraItem, val: Float)
        ///Mode of color management system.
        fn set_cms(cam: CameraItem, val: XI_CMS_MODE)
        ///Intent of color management system.
        fn set_cms_intent(cam: CameraItem, val: XI_CMS_INTENT)
        ///Enable applying of CMS profiles to xiGetImage (see XI_PRM_INPUT_CMS_PROFILE, XI_PRM_OUTPUT_CMS_PROFILE).
        fn set_apply_cms(cam: CameraItem, val: Boolean)
        ///Filename for input cms profile (e.g. input.icc)
        ///Filename for output cms profile (e.g. input.icc)
        ///Returns 1 for color cameras.
        fn set_iscolor(cam: CameraItem, val: Boolean)
        ///Returns color filter array type of RAW data.
        fn set_cfa(cam: CameraItem, val: XI_COLOR_FILTER_ARRAY)
        ///Luminosity gamma
        fn set_gammaY(cam: CameraItem, val: Float)
        ///Chromaticity gamma
        fn set_gammaC(cam: CameraItem, val: Float)
        ///Sharpness Strenght
        fn set_sharpness(cam: CameraItem, val: Float)
        ///Color Correction Matrix element [0][0]
        fn set_ccMTX00(cam: CameraItem, val: Float)
        ///Color Correction Matrix element [0][1]
        fn set_ccMTX01(cam: CameraItem, val: Float)
        ///Color Correction Matrix element [0][2]
        fn set_ccMTX02(cam: CameraItem, val: Float)
        ///Color Correction Matrix element [0][3]
        fn set_ccMTX03(cam: CameraItem, val: Float)
        ///Color Correction Matrix element [1][0]
        fn set_ccMTX10(cam: CameraItem, val: Float)
        ///Color Correction Matrix element [1][1]
        fn set_ccMTX11(cam: CameraItem, val: Float)
        ///Color Correction Matrix element [1][2]
        fn set_ccMTX12(cam: CameraItem, val: Float)
        ///Color Correction Matrix element [1][3]
        fn set_ccMTX13(cam: CameraItem, val: Float)
        ///Color Correction Matrix element [2][0]
        fn set_ccMTX20(cam: CameraItem, val: Float)
        ///Color Correction Matrix element [2][1]
        fn set_ccMTX21(cam: CameraItem, val: Float)
        ///Color Correction Matrix element [2][2]
        fn set_ccMTX22(cam: CameraItem, val: Float)
        ///Color Correction Matrix element [2][3]
        fn set_ccMTX23(cam: CameraItem, val: Float)
        ///Color Correction Matrix element [3][0]
        fn set_ccMTX30(cam: CameraItem, val: Float)
        ///Color Correction Matrix element [3][1]
        fn set_ccMTX31(cam: CameraItem, val: Float)
        ///Color Correction Matrix element [3][2]
        fn set_ccMTX32(cam: CameraItem, val: Float)
        ///Color Correction Matrix element [3][3]
        fn set_ccMTX33(cam: CameraItem, val: Float)
        ///Set default Color Correction Matrix
        fn set_defccMTX(cam: CameraItem, val: Command)
        ///Defines source of trigger.
        fn set_trigger_source(cam: CameraItem, val: XI_TRG_SOURCE)
        ///Generates an internal trigger. XI_PRM_TRG_SOURCE must be set to TRG_SOFTWARE.
        fn set_trigger_software(cam: CameraItem, val: Command)
        ///Selects the type of trigger.
        fn set_trigger_selector(cam: CameraItem, val: XI_TRG_SELECTOR)
        ///The mode of Trigger Overlap. This influences of trigger acception/rejection policy
        fn set_trigger_overlap(cam: CameraItem, val: XI_TRG_OVERLAP)
        ///Sets number of frames acquired by burst. This burst is used only if trigger is set to FrameBurstStart
        fn set_acq_frame_burst_count(cam: CameraItem, val: Integer)
        ///Selects GPI
        fn set_gpi_selector(cam: CameraItem, val: XI_GPI_SELECTOR)
        ///Defines GPI functionality
        fn set_gpi_mode(cam: CameraItem, val: XI_GPI_MODE)
        ///GPI level
        fn set_gpi_level(cam: CameraItem, val: Integer)
        ///Selects GPO
        fn set_gpo_selector(cam: CameraItem, val: XI_GPO_SELECTOR)
        ///Defines GPO functionality
        fn set_gpo_mode(cam: CameraItem, val: XI_GPO_MODE)
        ///Selects LED
        fn set_led_selector(cam: CameraItem, val: XI_LED_SELECTOR)
        ///Defines LED functionality
        fn set_led_mode(cam: CameraItem, val: XI_LED_MODE)
        ///Enable/Disable debounce to selected GPI
        fn set_dbnc_en(cam: CameraItem, val: Boolean)
        ///Debounce time (x * 10us)
        fn set_dbnc_t0(cam: CameraItem, val: Integer)
        ///Debounce time (x * 10us)
        fn set_dbnc_t1(cam: CameraItem, val: Integer)
        ///Debounce polarity (pol = 1 t0 - falling edge, t1 - rising edge)
        fn set_dbnc_pol(cam: CameraItem, val: Integer)
        ///Status of lens control interface. This shall be set to XI_ON before any Lens operations.
        fn set_lens_mode(cam: CameraItem, val: Boolean)
        ///Current lens aperture value in stops. Examples: 2.8, 4, 5.6, 8, 11
        fn set_lens_aperture_value(cam: CameraItem, val: Float)
        ///Lens current focus movement value to be used by XI_PRM_LENS_FOCUS_MOVE in motor steps.
        fn set_lens_focus_movement_value(cam: CameraItem, val: Integer)
        ///Moves lens focus motor by steps set in XI_PRM_LENS_FOCUS_MOVEMENT_VALUE.
        fn set_lens_focus_move(cam: CameraItem, val: Command)
        ///Lens focus distance in cm.
        fn set_lens_focus_distance(cam: CameraItem, val: Float)
        ///Lens focal distance in mm.
        fn set_lens_focal_length(cam: CameraItem, val: Float)
        ///Selects the current feature which is accessible by XI_PRM_LENS_FEATURE.
        fn set_lens_feature_selector(cam: CameraItem, val: XI_LENS_FEATURE)
        ///Allows access to lens feature value currently selected by XI_PRM_LENS_FEATURE_SELECTOR.
        fn set_lens_feature(cam: CameraItem, val: Float)
        ///Write/Read data sequences to/from lens
        ///Return device name
        ///Return device type
        ///Return device model id
        fn set_device_model_id(cam: CameraItem, val: Integer)
        ///Return device sensor model id
        fn set_sensor_model_id(cam: CameraItem, val: Integer)
        ///Return device serial number
        ///Return sensor serial number
        ///Return unique device ID
        ///Return device system instance path.
        ///Represents the location of the device in the device tree.
        ///Return custom ID of camera.
        ///Return device capability description XML.
        ///User image data at image header to track parameters synchronization.
        fn set_image_user_data(cam: CameraItem, val: Integer)
        ///The alpha channel of RGB32 output image format.
        fn set_imgdataformatrgb32alpha(cam: CameraItem, val: Integer)
        ///Buffer size in bytes sufficient for output image returned by xiGetImage
        fn set_imgpayloadsize(cam: CameraItem, val: Integer)
        ///Current format of pixels on transport layer.
        fn set_transport_pixel_format(cam: CameraItem, val: XI_GenTL_Image_Format_e)
        ///Target selector for data - CPU RAM or GPU RAM
        fn set_transport_data_target(cam: CameraItem, val: XI_TRANSPORT_DATA_TARGET_MODE)
        ///Sensor clock frequency in Hz.
        fn set_sensor_clock_freq_hz(cam: CameraItem, val: Float)
        ///Sensor clock frequency index. Sensor with selected frequencies have possibility to set the frequency only by this index.
        fn set_sensor_clock_freq_index(cam: CameraItem, val: Integer)
        ///Number of output channels from sensor used for data transfer.
        fn set_sensor_output_channel_count(cam: CameraItem, val: XI_SENSOR_OUTPUT_CHANNEL_COUNT)
        ///Define framerate in Hz
        fn set_framerate(cam: CameraItem, val: Float)
        ///Select counter
        fn set_counter_selector(cam: CameraItem, val: XI_COUNTER_SELECTOR)
        ///Counter status
        fn set_counter_value(cam: CameraItem, val: Integer)
        ///Type of sensor frames timing.
        fn set_acq_timing_mode(cam: CameraItem, val: XI_ACQ_TIMING_MODE)
        ///Measure and return available interface bandwidth(int Megabits)
        fn set_available_bandwidth(cam: CameraItem, val: Integer)
        ///Data move policy
        fn set_buffer_policy(cam: CameraItem, val: XI_BP)
        ///Activates LUT.
        fn set_LUTEnable(cam: CameraItem, val: Boolean)
        ///Control the index (offset) of the coefficient to access in the LUT.
        fn set_LUTIndex(cam: CameraItem, val: Integer)
        ///Value at entry LUTIndex of the LUT
        fn set_LUTValue(cam: CameraItem, val: Integer)
        ///Specifies the delay in microseconds (us) to apply after the trigger reception before activating it.
        fn set_trigger_delay(cam: CameraItem, val: Integer)
        ///Defines how time stamp reset engine will be armed
        fn set_ts_rst_mode(cam: CameraItem, val: XI_TS_RST_MODE)
        ///Defines which source will be used for timestamp reset. Writing this parameter will trigger settings of engine (arming)
        fn set_ts_rst_source(cam: CameraItem, val: XI_TS_RST_SOURCE)
        ///Returns 1 if camera connected and works properly.
        fn set_isexist(cam: CameraItem, val: Boolean)
        ///Acquisition buffer size in buffer_size_unit. Default bytes.
        fn set_acq_buffer_size(cam: CameraItem, val: Integer)
        ///Acquisition buffer size unit in bytes. Default 1. E.g. Value 1024 means that buffer_size is in KiBytes
        fn set_acq_buffer_size_unit(cam: CameraItem, val: Integer)
        ///Acquisition transport buffer size in bytes
        fn set_acq_transport_buffer_size(cam: CameraItem, val: Integer)
        ///Acquisition transport packet size in bytes
        fn set_acq_transport_packet_size(cam: CameraItem, val: Integer)
        ///Queue of field/frame buffers
        fn set_buffers_queue_size(cam: CameraItem, val: Integer)
        ///Number of buffers to commit to low level
        fn set_acq_transport_buffer_commit(cam: CameraItem, val: Integer)
        ///GetImage returns most recent frame
        fn set_recent_frame(cam: CameraItem, val: Boolean)
        ///Resets the camera to default state.
        fn set_device_reset(cam: CameraItem, val: Command)
        ///Correction of column FPN
        fn set_column_fpn_correction(cam: CameraItem, val: XI_SWITCH)
        ///Correction of row FPN
        fn set_row_fpn_correction(cam: CameraItem, val: XI_SWITCH)
        ///Select image correction function
        fn set_image_correction_selector(cam: CameraItem, val: XI_IMAGE_CORRECTION_SELECTOR)
        ///Select image correction selected function value
        fn set_image_correction_value(cam: CameraItem, val: Float)
        ///Current sensor mode. Allows to select sensor mode by one integer. Setting of this parameter affects: image dimensions and downsampling.
        fn set_sensor_mode(cam: CameraItem, val: XI_SENSOR_MODE)
        ///Enable High Dynamic Range feature.
        fn set_hdr(cam: CameraItem, val: Boolean)
        ///The number of kneepoints in the PWLR.
        fn set_hdr_kneepoint_count(cam: CameraItem, val: Integer)
        ///position of first kneepoint(in % of XI_PRM_EXPOSURE)
        fn set_hdr_t1(cam: CameraItem, val: Integer)
        ///position of second kneepoint (in % of XI_PRM_EXPOSURE)
        fn set_hdr_t2(cam: CameraItem, val: Integer)
        ///value of first kneepoint (% of sensor saturation)
        fn set_hdr_kneepoint1(cam: CameraItem, val: Integer)
        ///value of second kneepoint (% of sensor saturation)
        fn set_hdr_kneepoint2(cam: CameraItem, val: Integer)
        ///Last image black level counts. Can be used for Offline processing to recall it.
        fn set_image_black_level(cam: CameraItem, val: Integer)
        ///Returns version of API.
        ///Returns version of current device driver.
        ///Returns version of MCU1 firmware.
        ///Returns version of MCU2 firmware.
        ///Returns version of MCU3 firmware.
        ///Returns version of FPGA1 firmware.
        ///Returns version of XML manifest.
        ///Returns hardware revision number.
        ///Set debug level
        fn set_debug_level(cam: CameraItem, val: XI_DEBUG_LEVEL)
        ///Automatic bandwidth calculation,
        fn set_auto_bandwidth_calculation(cam: CameraItem, val: Boolean)
        ///Enables (2015/FAPI) processing chain for MQ MU cameras
        fn set_new_process_chain_enable(cam: CameraItem, val: Boolean)
        ///Enable enumeration of golden devices
        fn set_cam_enum_golden_enabled(cam: CameraItem, val: Boolean)
        ///Resets USB device if started as bootloader
        fn set_reset_usb_if_bootloader(cam: CameraItem, val: Boolean)
        ///Number of camera simulators to be available.
        fn set_cam_simulators_count(cam: CameraItem, val: Integer)
        ///Camera sensor will not be initialized when 1=XI_ON is set.
        fn set_cam_sensor_init_disabled(cam: CameraItem, val: Boolean)
        ///Read file from camera flash filesystem.
        ///Write file to camera flash filesystem.
        ///Set name of file to be written/read from camera FFS.
        ///File number.
        fn set_ffs_file_id(cam: CameraItem, val: Integer)
        ///Size of file.
        fn set_ffs_file_size(cam: CameraItem, val: Integer)
        ///Size of free camera FFS.
        fn set_free_ffs_size(cam: CameraItem, val: Integer)
        ///Size of used camera FFS.
        fn set_used_ffs_size(cam: CameraItem, val: Integer)
        ///Setting of key enables file operations on some cameras.
        fn set_ffs_access_key(cam: CameraItem, val: Integer)
        ///List of current parameters settings context - parameters with values. Used for offline processing.
        ///Selects the current feature which is accessible by XI_PRM_SENSOR_FEATURE_VALUE.
        fn set_sensor_feature_selector(cam: CameraItem, val: XI_SENSOR_FEATURE_SELECTOR)
        ///Allows access to sensor feature value currently selected by XI_PRM_SENSOR_FEATURE_SELECTOR.
        fn set_sensor_feature_value(cam: CameraItem, val: Integer)
        ///Selection of extended feature.
        fn set_ext_feature_selector(cam: CameraItem, val: XI_EXT_FEATURE_SELECTOR)
        ///Extended feature value.
        fn set_ext_feature(cam: CameraItem, val: Integer)
        ///Selects device unit.
        fn set_device_unit_selector(cam: CameraItem, val: XI_DEVICE_UNIT_SELECTOR)
        ///Selects register of selected device unit(XI_PRM_DEVICE_UNIT_SELECTOR).
        fn set_device_unit_register_selector(cam: CameraItem, val: Integer)
        ///Sets/gets register value of selected device unit(XI_PRM_DEVICE_UNIT_SELECTOR).
        fn set_device_unit_register_value(cam: CameraItem, val: Integer)
        ///Callback address of pointer that is called upon long tasks (e.g. XI_PRM_WRITE_FILE_FFS).
        ///Selects the internal acquisition signal to read using XI_PRM_ACQUISITION_STATUS.
        fn set_acquisition_status_selector(cam: CameraItem, val: XI_ACQUISITION_STATUS_SELECTOR)
        ///Acquisition status(True/False)
        fn set_acquisition_status(cam: CameraItem, val: XI_SWITCH)
    }

    impl {
        fn init()
        fn tick()
    }
}
