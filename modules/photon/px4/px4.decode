module px4

struct Heartbeat {
    baseMode : u8,
    customMode: u32,
    systemStatus : u8
}

enum LogLevel {
    Emergency = 0,
    Alert = 1,
    Critical = 2,
    Error = 3,
    Warning = 4,
    Notice = 5,
    Info = 6,
    Debug = 7
}

struct StatusText {
    logLevel : LogLevel,
    text : &[u8; 256]
}

struct AutopilotVersion {
    capabilities: u64,
    uid : u64,
    flight_sw_version : u32,
    middleware_sw_version : u32,
    os_sw_version : u32,
    board_version : u32,
    vendor_id : u16,
    product_id : u16,
    flight_custom_version : [u8; 8],
    middleware_custom_version : [u8; 8],
    os_custom_version : [u8; 8]
}

struct SystemStatus {
    batteryLevel : u8
}

struct RcChannels {
    timeBootMs : u32,
    chanCount : u8,
    rssi : u8,
    chanRaw : [u16; 18]
}

struct LastMessage {
    id: u32,
    seq: u8
}

enum Sensors {
    Accelerometer,
    Magnetometer,
    Gyroscope,
    Level,
    Esc,
    Radio,
}

enum Sides {
    Down,
    UpsideDown,
    Left,
    Right,
    NoseDown,
    TailDown,
}
struct CalibrationSideStatus {
    done: bool,
    visible: bool,
    inProgress: bool,
    rotate: bool,
}

enum CalibrationStatus {
    NotStarted,
    Failed,
    Done,
    CancelPending,
    Cancelled,
}

struct CalibrationState {
    sensor: Sensors,
    status: CalibrationStatus,
    calDownSide:       CalibrationSideStatus,
    calUpsideDownSide: CalibrationSideStatus,
    calLeftSide:       CalibrationSideStatus,
    calRightSide:      CalibrationSideStatus,
    calNoseDownSide:   CalibrationSideStatus,
    calTailDownSide:   CalibrationSideStatus,
    progress: u8,
    nextEnabled: bool,
    skipEnabled: bool
}

component {
    variables {
        heartbeat: Heartbeat,
        version: AutopilotVersion,
        systemStatus: SystemStatus,
        rcChannels: RcChannels,
        lastMessage: LastMessage,
        calibrationState: CalibrationState,
    }

    statuses {
        [heartbeat, 0, true]:       { heartbeat        }
        [systemStatus, 0, true]:    { systemStatus     }
        [rcChannels, 0, false]:     { rcChannels       }
        [lastMessage, 0, true]:     { lastMessage      }
        [calibration, 0, false]:     { calibrationState }
    }

    events {
        [unsupportedFcuVersion, true]: {version: u8},
        [unknownSensor, true]: {sensor: &[char; 128]},
        [failedToParse, true]: {msg: &[char; 256]},
        [calibrationStarted, true]: {sensor: Sensors},
        [calibrationDone, true]: {sensor: Sensors},
        [calibrationFailed, true]: {sensor: Sensors},
        [calibrationCancelled, true]: {sensor: Sensors},
        [calibrationSideStarted, true]: {sensor: Sensors, side: Sides}
        [calibrationSideDone, true]: {sensor: Sensors, side: Sides}
    }
    
    commands {
        fn arm()
        fn disarm()
        fn startCalibration(sensor: Sensors)
        fn cancelCalibration()
    }

    impl {
        fn init()
        fn tick()
    }
}
