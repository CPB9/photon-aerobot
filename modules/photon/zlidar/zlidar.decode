/// LeddarTech Vu8 module
module zlidar

type TextLine       = &[char;32];
type VersionBlock   = &[u16;4];

/// Detection block
struct Detection {
/// Channel number (0...8)
    channel                 : u8,
/// distance from the sensor, in meters
    distance                : f32,
/// signal amplitude
    amplitude               : f32,
}

/// Device information
struct DeviceInfo {
    firmwareVersion         : VersionBlock,
    bootloaderVersion       : VersionBlock,
    internalOptions         : u32,
    fpgaVersion             : u16,
    moduleCode              : u16,
    runStatus               : u8,
    segmentsAmount          : u8,

    serial                  : TextLine,
    name                    : TextLine,
    hardwarePartNumber      : TextLine,
    softwarePartNumber      : TextLine,
}

enum OperationModeWrite {
    WriteStop               = 0,
    WriteContinuous         = 1,
    WriteSingle             = 2,
}

enum OperationModeRead {
    ReadStopped             = 10,
    ReadContinuous          = 11,
    ReadSingle              = 12,
    ReadBusy                = 13,

    Unknown                 ,
}

/// Device parameters
struct DeviceParameters {
    sensitivity             : f32,
    segmentEnabled          : u32,
    accumulationExponent    : u16,
    oversamplingExponent    : u16,
    baseSamples             : u16,
    autoFrame               : u16,
    autoEcho                : u16,
/// from -16 to 16
    smoothing               : i8,
/// 100% max
    ledPower                : u8,
/// first 6 bits
    acquisitionOption       : u8,
    operationMode           : OperationModeRead,
}

/// Distances values
struct Distances {
    detections              : u8,
    offset                  : f32,
    values                  : &[Detection;8],
}

/// Temporary distances datagram
struct DistancesTemp {
    detections              : u8,
    offset                  : f32,
    value0                  : Detection,
    value1                  : Detection,
    value2                  : Detection,
    value3                  : Detection,
    value4                  : Detection,
    value5                  : Detection,
    value6                  : Detection,
    value7                  : Detection,
}

enum ErrorCode {
    WrongSensorsAmount      = 1,
}

/// Current device status
struct DeviceStatus {
    started                 : bool,
    errorCode               : u16,
}

/// List of avaiable frames
enum Frames {
    DeviceInfoFrame         =  1,
    DeviceParametersFrame   =  2,
    DeviceStatusFrame       =  4,
    DistancesFrame          =  8,
    DistancesTempFrame      = 16,
}
enum Accumulations {
    Accumulation1           = 1,
    Accumulation2           = 2,
    Accumulation4           = 4,
    Accumulation8           = 8,
    Accumulation16          = 16,
    Accumulation32          = 32,
    Accumulation64          = 64,
    Accumulation128         = 128,
    Accumulation256         = 256,
    Accumulation512         = 512,
    Accumulation1024        = 1024,
}

enum Oversamplings {
    Oversampling1           = 1,
    Oversampling2           = 2,
    Oversampling4           = 4,
    Oversampling8           = 8,
    Oversampling16          = 16,
    Oversampling32          = 32,
}

enum LedPowers {
    LedPower6               = 6,
    LedPower28              = 28,
    LedPower53              = 53,
    LedPower81              = 81,
    LedPower100             = 100,
}

component {
    variables {
        deviceInfo          : DeviceInfo,
        deviceParameters    : DeviceParameters,
        deviceStatus        : DeviceStatus,
        distances           : Distances,
        distancesTemp       : DistancesTemp,
    }

    statuses {
        [deviceInfo,        1, false]: {deviceInfo},
        [deviceParameters,  1, false]: {deviceParameters},
        [deviceStatus,      1, true ]: {deviceStatus},
        [distances,         1, false]: {distances},
        [distancesTemp,     1, false]: {distancesTemp},
    }

    commands {
/// Request data frame
        fn updateInfo(frameCode : Frames)
/// Request many data frames
        fn updateInfoMultiple(frames : varuint)
/// Start read distances from lidar
        fn start()
/// Stop read distances from lidar
        fn stop()
/// Set distance offset for zero point calibration
        fn setDistanceOffset(offset : f32)
/// Set number of accumulations
///
/// Higher values enhance the range, and reduce the measurement rate and noise.
        fn setAccumulation(accumulation : Accumulations)
/// Number of oversampling cycles
///
/// Higher values enhance the accuracy/precision/resolution and reduce the measurement rate.
        fn setOversampling(oversampling : Oversamplings)
/// Number of base sample points
///
/// Determines the maximum detection range. From 2 to 128.
        fn setPoints(points : u16)
/// Modification to the amplitude threshold (Sensitivity)
///
/// Higher values decrease the sensitivity and reduce the range. From -50.0 to 500.0.
        fn setThresholdOffset(sensitivity : f32)
/// Object smoothing algorithm
///
/// Smooths the LeddarVu module measurements.
/// The behavior of the smoothing algorithm can be adjusted by a value ranging from -16 to 16. Higher values enhance the module precision, but reduce the module reactivity.
        fn setSmoothing(smoothing : i8)
/// LED power
///
/// Light source power in percentage of the maximum. A value above 100 is an error. If a value is specified that is not one of the pre-defined values, the closest pre-defined value will be used.
/// The register can be read back to know the actual value set.
/// There is a total of 5 light source power levels. Their approximate relative power is evenly distributed between 0 through 100%.
        fn setLedPower(power : LedPowers)
/// Bit field of acquisition options.
///
/// Bit-0: Automatic light source power enabled
/// Bit-1: Demerge object enabled
/// Bit-2: Static noise removal enabled
/// Bit-3: Precision enabled
/// Bit-4: Saturation compensation enabled
/// Bit-5: Overshoot management enabled
        fn setAcquisitionOption(acquisition : u8)
/// Auto light source power change delay in number of measurements
///
/// From 1 to 8192.
        fn setAutoFrame(frame : u16)
/// Number of echoes for saturation acceptance
///
/// The number of echoes can be saturated to avoid decreasing the light source power in automatic mode. From 0 to 8.
        fn setAutoEcho(echo : u16)
/// Operation mode
        fn setOperationMode(mode : OperationModeWrite)
    }

    impl {
        fn init()
        fn tick()
    }
}
