/// LeddarTech Vu8 module
module zlidar

type TextLine       = &[char;32];
type VersionBlock   = &[u16;4];

/// Detection block
struct Detection {
/// Channel number (0...8)
    channel                 : u8,
/// distance from the sensor, in meters
    distance                : f32,
/// signal amplitude
    amplitude               : f32,
}

/// Device information
struct DeviceInfo {
    firmwareVersion         : VersionBlock,
    bootloaderVersion       : VersionBlock,
    internalOptions         : u32,
    fpgaVersion             : u16,
    moduleCode              : u16,
    runStatus               : u8,
    segmentsAmount          : u8,

    serial                  : TextLine,
    name                    : TextLine,
    hardwarePartNumber      : TextLine,
    softwarePartNumber      : TextLine,
}

enum OperationMode {
    WriteStop               = 0,
    WriteContinuous         = 1,
    WriteSingle             = 2,

    ReadStopped             = 10,
    ReadContinuous          = 11,
    ReadSingle              = 12,
    ReadBusy                = 13,

    Unknown                 ,
}

/// Device parameters
struct DeviceParameters {
    sensitivity             : f32,
    segmentEnabled          : u32,
    accumulationExponent    : u16,
    oversamplingExponent    : u16,
    baseSamples             : u16,
    autoFrame               : u16,
    autoEcho                : u16,
/// from -16 to 16
    smoothing               : i8,
/// 100% max
    ledPower                : u8,
/// first 6 bits
    acquisitionOption       : u8,
    operationMode           : OperationMode,
}

/// Distances values
struct Distances {
    detections              : u8,
    values                  : &[Detection;8],
}

/// Temporary distances datagram
struct DistancesTemp {
    detections              : u8,
    value0                  : Detection,
    value1                  : Detection,
    value2                  : Detection,
    value3                  : Detection,
    value4                  : Detection,
    value5                  : Detection,
    value6                  : Detection,
    value7                  : Detection,
}

enum ErrorCode {
    WrongSensorsAmount      = 1,
}

/// Current device status
struct DeviceStatus {
    started                 : bool,
    errorCode               : u16,
}

/// List of avaiable frames
enum Frames {
    DeviceInfoFrame         = 1,
    DeviceParametersFrame   = 2,
    DeviceStatusFrame       = 3,
    DistancesFrame          = 4,
    DistancesTempFrame      = 5,
}

component {
    variables {
        deviceInfo          : DeviceInfo,
        deviceParameters    : DeviceParameters,
        deviceStatus        : DeviceStatus,
        distances           : Distances,
        distancesTemp       : DistancesTemp,
    }

    statuses {
        [deviceInfo,        1, false]: {deviceInfo},
        [deviceParameters,  1, false]: {deviceParameters},
        [deviceStatus,      1, false]: {deviceStatus},
        [distances,         1, false]: {distances},
        [distancesTemp,     1, false]: {distancesTemp},
    }

    commands {
        fn updateInfo(frameCode : Frames)
        fn start()
        fn stop()
    }

    impl {
        fn init()
        fn tick()
    }
}
