module px4_autogen

struct UAVCAN_Motor_Parameters {
    ctl_bw: i32,
    ctl_dir: i32,
    ctl_gain: f32,
    ctl_hz_idle: f32,
    ctl_start_rate: i32,
    esc_index: i32,
    id_ext_status: i32,
    int_ext_status: i32,
    int_status: i32,
    mot_i_max: f32,
    mot_kv: i32,
    mot_ls: f32,
    mot_num_poles: i32,
    mot_rs: f32,
    mot_v_accel: f32,
    mot_v_max: f32,
}

struct Attitude_EKF_estimator {
    EKF_ATT_V3_Q0: f32,
    EKF_ATT_V3_Q1: f32,
    EKF_ATT_V3_Q2: f32,
    EKF_ATT_V3_Q3: f32,
    EKF_ATT_V4_R0: f32,
    EKF_ATT_V4_R1: f32,
    EKF_ATT_V4_R2: f32,
    ATT_J11: f32,
    ATT_J22: f32,
    ATT_J33: f32,
    ATT_J_EN: i32,
}

struct Attitude_Q_estimator {
    ATT_W_ACC: f32,
    ATT_W_MAG: f32,
    ATT_W_EXT_HDG: f32,
    ATT_W_GYRO_BIAS: f32,
    ATT_MAG_DECL: f32,
    ATT_MAG_DECL_A: i32,
    ATT_EXT_HDG_M: i32,
    ATT_ACC_COMP: i32,
    ATT_BIAS_MAX: f32,
    ATT_VIBE_THRESH: f32,
}

struct Battery_Calibration {
    BAT_V_EMPTY: f32,
    BAT_V_CHARGED: f32,
    BAT_LOW_THR: f32,
    BAT_CRIT_THR: f32,
    BAT_V_LOAD_DROP: f32,
    BAT_R_INTERNAL: f32,
    BAT_N_CELLS: i32,
    BAT_CAPACITY: f32,
    BAT_V_SCALE_IO: i32,
    BAT_CNT_V_VOLT: f32,
    BAT_CNT_V_CURR: f32,
    BAT_V_OFFS_CURR: f32,
    BAT_V_DIV: f32,
    BAT_A_PER_V: f32,
    BAT_SOURCE: i32,
}

struct Camera_trigger {
    TRIG_INTERFACE: i32,
    TRIG_INTERVAL: f32,
    TRIG_POLARITY: i32,
    TRIG_ACT_TIME: f32,
    TRIG_MODE: i32,
    TRIG_PINS: i32,
    TRIG_DISTANCE: f32,
}

struct Circuit_Breaker {
    CBRK_SUPPLY_CHK: i32,
    CBRK_RATE_CTRL: i32,
    CBRK_IO_SAFETY: i32,
    CBRK_AIRSPD_CHK: i32,
    CBRK_FLIGHTTERM: i32,
    CBRK_ENGINEFAIL: i32,
    CBRK_GPSFAIL: i32,
    CBRK_BUZZER: i32,
    CBRK_USB_CHK: i32,
}

struct Commander {
    COM_DL_LOSS_T: i32,
    COM_DL_REG_T: i32,
    COM_EF_THROT: f32,
    COM_EF_C2T: f32,
    COM_EF_TIME: f32,
    COM_RC_LOSS_T: f32,
    COM_HOME_H_T: f32,
    COM_HOME_V_T: f32,
    COM_AUTOS_PAR: i32,
    COM_RC_IN_MODE: i32,
    COM_RC_ARM_HYST: i32,
    COM_DISARM_LAND: i32,
    COM_ARM_WO_GPS: i32,
    COM_LOW_BAT_ACT: i32,
    COM_OF_LOSS_T: f32,
    COM_ARM_EKF_POS: f32,
    COM_ARM_EKF_VEL: f32,
    COM_ARM_EKF_HGT: f32,
    COM_ARM_EKF_YAW: f32,
    COM_ARM_EKF_AB: f32,
    COM_ARM_EKF_GB: f32,
    COM_ARM_IMU_ACC: f32,
    COM_ARM_IMU_GYR: f32,
}

struct Data_Link_Loss {
    NAV_AH_LAT: i32,
    NAV_AH_LON: i32,
    NAV_AH_ALT: f32,
    NAV_DLL_CH_T: f32,
    NAV_DLL_CH_LAT: i32,
    NAV_DLL_CH_LON: i32,
    NAV_DLL_CH_ALT: f32,
    NAV_DLL_AH_T: f32,
    NAV_DLL_N: i32,
    NAV_DLL_CHSK: i32,
}

struct EKF2 {
    EKF2_MIN_OBS_DT: i32,
    EKF2_MAG_DELAY: f32,
    EKF2_BARO_DELAY: f32,
    EKF2_GPS_DELAY: f32,
    EKF2_OF_DELAY: f32,
    EKF2_RNG_DELAY: f32,
    EKF2_ASP_DELAY: f32,
    EKF2_EV_DELAY: f32,
    EKF2_GPS_CHECK: i32,
    EKF2_REQ_EPH: f32,
    EKF2_REQ_EPV: f32,
    EKF2_REQ_SACC: f32,
    EKF2_REQ_NSATS: i32,
    EKF2_REQ_GDOP: f32,
    EKF2_REQ_HDRIFT: f32,
    EKF2_REQ_VDRIFT: f32,
    EKF2_GYR_NOISE: f32,
    EKF2_ACC_NOISE: f32,
    EKF2_GYR_B_NOISE: f32,
    EKF2_ACC_B_NOISE: f32,
    EKF2_MAG_B_NOISE: f32,
    EKF2_MAG_E_NOISE: f32,
    EKF2_WIND_NOISE: f32,
    EKF2_GPS_V_NOISE: f32,
    EKF2_GPS_P_NOISE: f32,
    EKF2_NOAID_NOISE: f32,
    EKF2_BARO_NOISE: f32,
    EKF2_HEAD_NOISE: f32,
    EKF2_MAG_NOISE: f32,
    EKF2_EAS_NOISE: f32,
    EKF2_BETA_NOISE: f32,
    EKF2_MAG_DECL: f32,
    EKF2_HDG_GATE: f32,
    EKF2_MAG_GATE: f32,
    EKF2_DECL_TYPE: i32,
    EKF2_MAG_TYPE: i32,
    EKF2_BARO_GATE: f32,
    EKF2_GPS_P_GATE: f32,
    EKF2_GPS_V_GATE: f32,
    EKF2_TAS_GATE: f32,
    EKF2_REC_RPL: i32,
    EKF2_AID_MASK: i32,
    EKF2_HGT_MODE: i32,
    EKF2_RNG_NOISE: f32,
    EKF2_RNG_GATE: f32,
    EKF2_MIN_RNG: f32,
    EKF2_EVP_NOISE: f32,
    EKF2_EVA_NOISE: f32,
    EKF2_EV_GATE: f32,
    EKF2_MIN_EV: f32,
    EKF2_OF_N_MIN: f32,
    EKF2_OF_N_MAX: f32,
    EKF2_OF_QMIN: i32,
    EKF2_OF_GATE: f32,
    EKF2_OF_RMAX: f32,
    EKF2_TERR_NOISE: f32,
    EKF2_TERR_GRAD: f32,
    EKF2_IMU_POS_X: f32,
    EKF2_IMU_POS_Y: f32,
    EKF2_IMU_POS_Z: f32,
    EKF2_GPS_POS_X: f32,
    EKF2_GPS_POS_Y: f32,
    EKF2_GPS_POS_Z: f32,
    EKF2_RNG_POS_X: f32,
    EKF2_RNG_POS_Y: f32,
    EKF2_RNG_POS_Z: f32,
    EKF2_OF_POS_X: f32,
    EKF2_OF_POS_Y: f32,
    EKF2_OF_POS_Z: f32,
    EKF2_EV_POS_X: f32,
    EKF2_EV_POS_Y: f32,
    EKF2_EV_POS_Z: f32,
    EKF2_ARSP_THR: f32,
    EKF2_FUSE_BETA: i32,
    EKF2_TAU_VEL: f32,
    EKF2_TAU_POS: f32,
    EKF2_GBIAS_INIT: f32,
    EKF2_ABIAS_INIT: f32,
    EKF2_ANGERR_INIT: f32,
}

struct FW_Attitude_Control {
    FW_R_TC: f32,
    FW_P_TC: f32,
    FW_PR_P: f32,
    FW_PR_I: f32,
    FW_P_RMAX_POS: f32,
    FW_P_RMAX_NEG: f32,
    FW_PR_IMAX: f32,
    FW_RR_P: f32,
    FW_RR_I: f32,
    FW_RR_IMAX: f32,
    FW_R_RMAX: f32,
    FW_YR_P: f32,
    FW_YR_I: f32,
    FW_YR_IMAX: f32,
    FW_Y_RMAX: f32,
    FW_WR_P: f32,
    FW_WR_I: f32,
    FW_WR_IMAX: f32,
    FW_W_RMAX: f32,
    FW_RR_FF: f32,
    FW_PR_FF: f32,
    FW_YR_FF: f32,
    FW_WR_FF: f32,
    FW_YCO_VMIN: f32,
    FW_YCO_METHOD: i32,
    FW_RSP_OFF: f32,
    FW_PSP_OFF: f32,
    FW_MAN_R_MAX: f32,
    FW_MAN_P_MAX: f32,
    FW_FLAPS_SCL: f32,
    FW_FLAPERON_SCL: f32,
    FW_ARSP_MODE: i32,
    FW_MAN_R_SC: f32,
    FW_MAN_P_SC: f32,
    FW_MAN_Y_SC: f32,
}

struct FW_L1_Control {
    FW_L1_PERIOD: f32,
    FW_L1_DAMPING: f32,
    FW_THR_CRUISE: f32,
    FW_THR_SLEW_MAX: f32,
    FW_P_LIM_MIN: f32,
    FW_P_LIM_MAX: f32,
    FW_R_LIM: f32,
    FW_THR_MAX: f32,
    FW_THR_MIN: f32,
    FW_THR_IDLE: f32,
    FW_THR_LND_MAX: f32,
    FW_CLMBOUT_DIFF: f32,
    FW_LND_ANG: f32,
    FW_LND_HVIRT: f32,
    FW_LND_FLALT: f32,
    FW_LND_TLALT: f32,
    FW_LND_HHDIST: f32,
    FW_LND_USETER: i32,
    FW_LND_FL_PMIN: f32,
    FW_LND_FL_PMAX: f32,
    FW_LND_AIRSPD_SC: f32,
}

struct FW_TECS {
    FW_AIRSPD_MIN: f32,
    FW_AIRSPD_MAX: f32,
    FW_T_CLMB_MAX: f32,
    FW_T_SINK_MIN: f32,
    FW_T_SINK_MAX: f32,
    FW_T_TIME_CONST: f32,
    FW_T_THRO_CONST: f32,
    FW_T_THR_DAMP: f32,
    FW_T_INTEG_GAIN: f32,
    FW_T_VERT_ACC: f32,
    FW_T_HGT_OMEGA: f32,
    FW_T_SPD_OMEGA: f32,
    FW_T_RLL2THR: f32,
    FW_T_SPDWEIGHT: f32,
    FW_T_PTCH_DAMP: f32,
    FW_T_HRATE_P: f32,
    FW_T_HRATE_FF: f32,
    FW_T_SRATE_P: f32,
    FW_AIRSPD_TRIM: f32,
}

struct Follow_target {
    NAV_MIN_FT_HT: f32,
    NAV_FT_DST: f32,
    NAV_FT_FS: i32,
    NAV_FT_RS: f32,
}

struct GPS {
    GPS_DUMP_COMM: i32,
}

struct GPS_Failure_Navigation {
    NAV_GPSF_LT: f32,
    NAV_GPSF_R: f32,
    NAV_GPSF_P: f32,
    NAV_GPSF_TR: f32,
}

struct Geofence {
    GF_ACTION: i32,
    GF_ALTMODE: i32,
    GF_SOURCE: i32,
    GF_COUNT: i32,
    GF_MAX_HOR_DIST: f32,
    GF_MAX_VER_DIST: f32,
}

struct Land_Detector {
    LNDMC_Z_VEL_MAX: f32,
    LNDMC_XY_VEL_MAX: f32,
    LNDMC_ROT_MAX: f32,
    LNDMC_FFALL_THR: f32,
    LNDMC_FFALL_TTRI: f32,
    LNDFW_VEL_XY_MAX: f32,
    LNDFW_VEL_Z_MAX: f32,
    LNDFW_VELI_MAX: f32,
    LNDFW_AIRSPD_MAX: f32,
}

struct Launch_detection {
    LAUN_ALL_ON: i32,
    LAUN_CAT_A: f32,
    LAUN_CAT_T: f32,
    LAUN_CAT_MDEL: f32,
    LAUN_CAT_PMAX: f32,
}

struct Local_Position_Estimator {
    LPE_PUB_AGL_Z: f32,
    LPE_FLW_OFF_Z: f32,
    LPE_FLW_SCALE: f32,
    LPE_FLW_GYRO_CMP: i32,
    LPE_FLW_QMIN: i32,
    LPE_SNR_Z: f32,
    LPE_SNR_OFF_Z: f32,
    LPE_LDR_Z: f32,
    LPE_LDR_OFF_Z: f32,
    LPE_ACC_XY: f32,
    LPE_ACC_Z: f32,
    LPE_BAR_Z: f32,
    LPE_GPS_ON: i32,
    LPE_GPS_DELAY: f32,
    LPE_GPS_XY: f32,
    LPE_GPS_Z: f32,
    LPE_GPS_VXY: f32,
    LPE_GPS_VZ: f32,
    LPE_EPH_MAX: f32,
    LPE_EPV_MAX: f32,
    LPE_VIS_DELAY: f32,
    LPE_VIS_XY: f32,
    LPE_VIS_Z: f32,
    LPE_VIS_ON: i32,
    LPE_VIC_P: f32,
    LPE_PN_P: f32,
    LPE_PN_V: f32,
    LPE_PN_B: f32,
    LPE_PN_T: f32,
    LPE_T_MAX_GRADE: f32,
    LPE_FGYRO_HP: f32,
    LPE_LAT: f32,
    LPE_LON: f32,
    LPE_X_LP: f32,
    LPE_VXY_PUB: f32,
    LPE_Z_PUB: f32,
    LPE_LAND_Z: f32,
}

struct MAVLink {
    MAV_SYS_ID: i32,
    MAV_COMP_ID: i32,
    MAV_PROTO_VER: i32,
    MAV_RADIO_ID: i32,
    MAV_TYPE: i32,
    MAV_USEHILGPS: i32,
    MAV_FWDEXTSP: i32,
    MAV_BROADCAST: i32,
    MAV_TEST_PAR: i32,
}

struct MKBLCTRL_Testmode {
    MKBLCTRL_TEST: i32,
}

struct MPU9x50_Configuration {
    MPU_GYRO_LPF_ENM: i32,
    MPU_ACC_LPF_ENM: i32,
    MPU_SAMPLE_R_ENM: i32,
}

struct Mission {
    COM_OBL_ACT: i32,
    COM_OBL_RC_ACT: i32,
    NAV_LOITER_RAD: f32,
    NAV_ACC_RAD: f32,
    NAV_FW_ALT_RAD: f32,
    NAV_MC_ALT_RAD: f32,
    NAV_DLL_ACT: i32,
    NAV_RCL_ACT: i32,
    MIS_TAKEOFF_ALT: f32,
    MIS_LTRMIN_ALT: f32,
    MIS_ONBOARD_EN: i32,
    MIS_DIST_1WP: f32,
    MIS_ALTMODE: i32,
    MIS_YAWMODE: i32,
    MIS_YAW_TMT: f32,
    MIS_YAW_ERR: f32,
    VT_WV_LND_EN: i32,
    VT_WV_LTR_EN: i32,
}

struct Mount {
    MNT_MODE_IN: i32,
    MNT_MODE_OUT: i32,
    MNT_MAV_SYSID: i32,
    MNT_MAV_COMPID: i32,
    MNT_OB_NORM_MODE: f32,
    MNT_OB_LOCK_MODE: f32,
    MNT_MAN_CONTROL: i32,
    MNT_MAN_ROLL: i32,
    MNT_MAN_PITCH: i32,
    MNT_MAN_YAW: i32,
}

struct Multicopter_Attitude_Control {
    MC_ROLL_TC: f32,
    MC_PITCH_TC: f32,
    MC_ROLL_P: f32,
    MC_ROLLRATE_P: f32,
    MC_ROLLRATE_I: f32,
    MC_ROLLRATE_D: f32,
    MC_ROLLRATE_FF: f32,
    MC_PITCH_P: f32,
    MC_PITCHRATE_P: f32,
    MC_PITCHRATE_I: f32,
    MC_PITCHRATE_D: f32,
    MC_PITCHRATE_FF: f32,
    MC_YAW_P: f32,
    MC_YAWRATE_P: f32,
    MC_YAWRATE_I: f32,
    MC_YAWRATE_D: f32,
    MC_YAWRATE_FF: f32,
    MC_YAW_FF: f32,
    MC_ROLLRATE_MAX: f32,
    MC_PITCHRATE_MAX: f32,
    MC_YAWRATE_MAX: f32,
    MC_YAWRAUTO_MAX: f32,
    MC_ACRO_R_MAX: f32,
    MC_ACRO_P_MAX: f32,
    MC_ACRO_Y_MAX: f32,
    MC_RATT_TH: f32,
    MC_TPA_BREAK: f32,
    MC_TPA_SLOPE: f32,
    MC_BAT_SCALE_EN: i32,
    MPP_MAN_R_MAX: f32,
    MPP_MAN_P_MAX: f32,
    MPP_MAN_Y_MAX: f32,
    MP_ROLL_P: f32,
    MP_ROLLRATE_P: f32,
    MP_ROLLRATE_I: f32,
    MP_ROLLRATE_D: f32,
    MP_PITCH_P: f32,
    MP_PITCHRATE_P: f32,
    MP_PITCHRATE_I: f32,
    MP_PITCHRATE_D: f32,
    MP_YAW_P: f32,
    MP_YAWRATE_P: f32,
    MP_YAWRATE_I: f32,
    MP_YAWRATE_D: f32,
    MP_YAW_FF: f32,
    MP_YAWRATE_MAX: f32,
    MP_ACRO_R_MAX: f32,
    MP_ACRO_P_MAX: f32,
    MP_ACRO_Y_MAX: f32,
}

struct Multicopter_Position_Control {
    MPC_THR_MIN: f32,
    MPC_THR_HOVER: f32,
    MPC_ALTCTL_DZ: f32,
    MPC_ALTCTL_DY: f32,
    MPC_THR_MAX: f32,
    MPC_MANTHR_MIN: f32,
    MPC_MANTHR_MAX: f32,
    MPC_Z_P: f32,
    MPC_Z_VEL_P: f32,
    MPC_Z_VEL_I: f32,
    MPC_Z_VEL_D: f32,
    MPC_Z_VEL_MAX_UP: f32,
    MPC_Z_VEL_MAX: f32,
    MPC_Z_VEL_MAX_DN: f32,
    MPC_Z_FF: f32,
    MPC_XY_P: f32,
    MPC_XY_VEL_P: f32,
    MPC_XY_VEL_I: f32,
    MPC_XY_VEL_D: f32,
    MPC_XY_CRUISE: f32,
    MPC_XY_VEL_MAX: f32,
    MPC_XY_FF: f32,
    MPC_TILTMAX_AIR: f32,
    MPC_TILTMAX_LND: f32,
    MPC_LAND_SPEED: f32,
    MPC_TKO_SPEED: f32,
    MPC_MAN_R_MAX: f32,
    MPC_MAN_P_MAX: f32,
    MPC_MAN_Y_MAX: f32,
    MPC_HOLD_XY_DZ: f32,
    MPC_HOLD_MAX_XY: f32,
    MPC_HOLD_MAX_Z: f32,
    MPC_VELD_LP: f32,
    MPC_ACC_HOR_MAX: f32,
    MPC_ALT_MODE: i32,
    MPP_THR_MIN: f32,
    MPP_THR_MAX: f32,
    MPP_Z_P: f32,
    MPP_Z_VEL_P: f32,
    MPP_Z_VEL_I: f32,
    MPP_Z_VEL_D: f32,
    MPP_Z_VEL_MAX: f32,
    MPP_Z_FF: f32,
    MPP_XY_P: f32,
    MPP_XY_VEL_P: f32,
    MPP_XY_VEL_I: f32,
    MPP_XY_VEL_D: f32,
    MPP_XY_VEL_MAX: f32,
    MPP_XY_FF: f32,
    MPP_TILTMAX_AIR: f32,
    MPP_TILTMAX_LND: f32,
    MPP_LAND_SPEED: f32,
}

struct PWM_Outputs {
    PWM_RATE: i32,
    PWM_MIN: i32,
    PWM_MAX: i32,
    PWM_DISARMED: i32,
    PWM_AUX_MIN: i32,
    PWM_AUX_MAX: i32,
    PWM_AUX_DISARMED: i32,
    MOT_SLEW_MAX: f32,
    PWM_MAIN_REV1: i32,
    PWM_MAIN_REV2: i32,
    PWM_MAIN_REV3: i32,
    PWM_MAIN_REV4: i32,
    PWM_MAIN_REV5: i32,
    PWM_MAIN_REV6: i32,
    PWM_MAIN_REV7: i32,
    PWM_MAIN_REV8: i32,
    PWM_SBUS_MODE: i32,
    PWM_AUX_REV1: i32,
    PWM_AUX_REV2: i32,
    PWM_AUX_REV3: i32,
    PWM_AUX_REV4: i32,
    PWM_AUX_REV5: i32,
    PWM_AUX_REV6: i32,
}

struct Payload_drop {
    BD_GPROPERTIES: f32,
    BD_TURNRADIUS: f32,
    BD_PRECISION: f32,
    BD_OBJ_CD: f32,
    BD_OBJ_MASS: f32,
    BD_OBJ_SURFACE: f32,
}

struct Position_Estimator {
    PE_VEL_DELAY_MS: i32,
    PE_POS_DELAY_MS: i32,
    PE_HGT_DELAY_MS: i32,
    PE_MAG_DELAY_MS: i32,
    PE_TAS_DELAY_MS: i32,
    PE_GPS_ALT_WGT: f32,
    PE_EAS_NOISE: f32,
    PE_VELNE_NOISE: f32,
    PE_VELD_NOISE: f32,
    PE_POSNE_NOISE: f32,
    PE_POSD_NOISE: f32,
    PE_MAG_NOISE: f32,
    PE_GYRO_PNOISE: f32,
    PE_ACC_PNOISE: f32,
    PE_GBIAS_PNOISE: f32,
    PE_ABIAS_PNOISE: f32,
    PE_MAGE_PNOISE: f32,
    PE_MAGB_PNOISE: f32,
    PE_MAGB_X: f32,
    PE_MAGB_Y: f32,
    PE_MAGB_Z: f32,
    PE_POSDEV_INIT: f32,
}

struct Position_Estimator_INAV {
    INAV_W_Z_BARO: f32,
    INAV_W_Z_GPS_P: f32,
    INAV_W_Z_GPS_V: f32,
    INAV_W_Z_VIS_P: f32,
    INAV_W_Z_LIDAR: f32,
    INAV_W_XY_GPS_P: f32,
    INAV_W_XY_GPS_V: f32,
    INAV_W_XY_VIS_P: f32,
    INAV_W_XY_VIS_V: f32,
    INAV_W_MOC_P: f32,
    INAV_W_XY_FLOW: f32,
    INAV_W_XY_RES_V: f32,
    INAV_W_GPS_FLOW: f32,
    INAV_W_ACC_BIAS: f32,
    INAV_FLOW_K: f32,
    INAV_FLOW_Q_MIN: f32,
    INAV_LIDAR_ERR: f32,
    INAV_LAND_T: f32,
    INAV_LAND_DISP: f32,
    INAV_LAND_THR: f32,
    INAV_DELAY_GPS: f32,
    INAV_FLOW_DIST_X: f32,
    INAV_FLOW_DIST_Y: f32,
    INAV_DISAB_MOCAP: f32,
    INAV_LIDAR_EST: f32,
    INAV_LIDAR_OFF: f32,
    CBRK_NO_VISION: i32,
}

struct RC_Receiver_Configuration {
    RC_RECEIVER_TYPE: i32,
}

struct Radio_Calibration {
    RC1_MIN: f32,
    RC1_TRIM: f32,
    RC1_MAX: f32,
    RC1_REV: f32,
    RC1_DZ: f32,
    RC2_MIN: f32,
    RC2_TRIM: f32,
    RC2_MAX: f32,
    RC2_REV: f32,
    RC2_DZ: f32,
    RC3_MIN: f32,
    RC3_TRIM: f32,
    RC3_MAX: f32,
    RC3_REV: f32,
    RC3_DZ: f32,
    RC4_MIN: f32,
    RC4_TRIM: f32,
    RC4_MAX: f32,
    RC4_REV: f32,
    RC4_DZ: f32,
    RC5_MIN: f32,
    RC5_TRIM: f32,
    RC5_MAX: f32,
    RC5_REV: f32,
    RC5_DZ: f32,
    RC6_MIN: f32,
    RC6_TRIM: f32,
    RC6_MAX: f32,
    RC6_REV: f32,
    RC6_DZ: f32,
    RC7_MIN: f32,
    RC7_TRIM: f32,
    RC7_MAX: f32,
    RC7_REV: f32,
    RC7_DZ: f32,
    RC8_MIN: f32,
    RC8_TRIM: f32,
    RC8_MAX: f32,
    RC8_REV: f32,
    RC8_DZ: f32,
    RC9_MIN: f32,
    RC9_TRIM: f32,
    RC9_MAX: f32,
    RC9_REV: f32,
    RC9_DZ: f32,
    RC10_MIN: f32,
    RC10_TRIM: f32,
    RC10_MAX: f32,
    RC10_REV: f32,
    RC10_DZ: f32,
    RC11_MIN: f32,
    RC11_TRIM: f32,
    RC11_MAX: f32,
    RC11_REV: f32,
    RC11_DZ: f32,
    RC12_MIN: f32,
    RC12_TRIM: f32,
    RC12_MAX: f32,
    RC12_REV: f32,
    RC12_DZ: f32,
    RC13_MIN: f32,
    RC13_TRIM: f32,
    RC13_MAX: f32,
    RC13_REV: f32,
    RC13_DZ: f32,
    RC14_MIN: f32,
    RC14_TRIM: f32,
    RC14_MAX: f32,
    RC14_REV: f32,
    RC14_DZ: f32,
    RC15_MIN: f32,
    RC15_TRIM: f32,
    RC15_MAX: f32,
    RC15_REV: f32,
    RC15_DZ: f32,
    RC16_MIN: f32,
    RC16_TRIM: f32,
    RC16_MAX: f32,
    RC16_REV: f32,
    RC16_DZ: f32,
    RC17_MIN: f32,
    RC17_TRIM: f32,
    RC17_MAX: f32,
    RC17_REV: f32,
    RC17_DZ: f32,
    RC18_MIN: f32,
    RC18_TRIM: f32,
    RC18_MAX: f32,
    RC18_REV: f32,
    RC18_DZ: f32,
    RC_RL1_DSM_VCC: i32,
    RC_DSM_BIND: i32,
    RC_CHAN_CNT: i32,
    RC_TH_USER: i32,
    RC_MAP_ROLL: i32,
    RC_MAP_PITCH: i32,
    RC_MAP_THROTTLE: i32,
    RC_MAP_YAW: i32,
    RC_MAP_AUX1: i32,
    RC_MAP_AUX2: i32,
    RC_MAP_AUX3: i32,
    RC_MAP_AUX4: i32,
    RC_MAP_AUX5: i32,
    RC_MAP_PARAM1: i32,
    RC_MAP_PARAM2: i32,
    RC_MAP_PARAM3: i32,
    RC_FAILS_THR: i32,
    RC_RSSI_PWM_CHAN: i32,
    RC_RSSI_PWM_MAX: i32,
    RC_RSSI_PWM_MIN: i32,
    TRIM_ROLL: f32,
    TRIM_PITCH: f32,
    TRIM_YAW: f32,
}

struct Radio_Signal_Loss {
    NAV_RCL_LT: f32,
}

struct Radio_Switches {
    RC_MAP_FLTMODE: i32,
    RC_MAP_MODE_SW: i32,
    RC_MAP_RETURN_SW: i32,
    RC_MAP_RATT_SW: i32,
    RC_MAP_POSCTL_SW: i32,
    RC_MAP_LOITER_SW: i32,
    RC_MAP_ACRO_SW: i32,
    RC_MAP_OFFB_SW: i32,
    RC_MAP_KILL_SW: i32,
    RC_MAP_FLAPS: i32,
    RC_MAP_TRANS_SW: i32,
    RC_MAP_GEAR_SW: i32,
    RC_ASSIST_TH: f32,
    RC_AUTO_TH: f32,
    RC_RATT_TH: f32,
    RC_POSCTL_TH: f32,
    RC_RETURN_TH: f32,
    RC_LOITER_TH: f32,
    RC_ACRO_TH: f32,
    RC_OFFB_TH: f32,
    RC_KILLSWITCH_TH: f32,
    RC_TRANS_TH: f32,
    RC_GEAR_TH: f32,
}

struct Return_To_Land {
    RTL_RETURN_ALT: f32,
    RTL_DESCEND_ALT: f32,
    RTL_LAND_DELAY: f32,
    RTL_MIN_DIST: f32,
}

struct Runway_Takeoff {
    RWTO_TKOFF: i32,
    RWTO_HDG: i32,
    RWTO_NAV_ALT: f32,
    RWTO_MAX_THR: f32,
    RWTO_PSP: f32,
    RWTO_MAX_PITCH: f32,
    RWTO_MAX_ROLL: f32,
    RWTO_AIRSPD_SCL: f32,
}

struct SD_Logging {
    SDLOG_UTC_OFFSET: i32,
    SDLOG_MODE: i32,
    SDLOG_RATE: i32,
    SDLOG_EXT: i32,
    SDLOG_GPSTIME: i32,
    SDLOG_PRIO_BOOST: i32,
}

struct Sensor_Calibration {
    CAL_BOARD_ID: i32,
    CAL_GYRO0_ID: i32,
    CAL_GYRO0_XOFF: f32,
    CAL_GYRO0_YOFF: f32,
    CAL_GYRO0_ZOFF: f32,
    CAL_GYRO0_XSCALE: f32,
    CAL_GYRO0_YSCALE: f32,
    CAL_GYRO0_ZSCALE: f32,
    CAL_MAG0_ID: i32,
    CAL_MAG0_ROT: i32,
    CAL_MAG0_XOFF: f32,
    CAL_MAG0_YOFF: f32,
    CAL_MAG0_ZOFF: f32,
    CAL_MAG0_XSCALE: f32,
    CAL_MAG0_YSCALE: f32,
    CAL_MAG0_ZSCALE: f32,
    CAL_ACC0_ID: i32,
    CAL_ACC0_XOFF: f32,
    CAL_ACC0_YOFF: f32,
    CAL_ACC0_ZOFF: f32,
    CAL_ACC0_XSCALE: f32,
    CAL_ACC0_YSCALE: f32,
    CAL_ACC0_ZSCALE: f32,
    CAL_GYRO1_ID: i32,
    CAL_GYRO1_XOFF: f32,
    CAL_GYRO1_YOFF: f32,
    CAL_GYRO1_ZOFF: f32,
    CAL_GYRO1_XSCALE: f32,
    CAL_GYRO1_YSCALE: f32,
    CAL_GYRO1_ZSCALE: f32,
    CAL_MAG1_ID: i32,
    CAL_MAG1_ROT: i32,
    CAL_MAG1_XOFF: f32,
    CAL_MAG1_YOFF: f32,
    CAL_MAG1_ZOFF: f32,
    CAL_MAG1_XSCALE: f32,
    CAL_MAG1_YSCALE: f32,
    CAL_MAG1_ZSCALE: f32,
    CAL_ACC1_ID: i32,
    CAL_ACC1_XOFF: f32,
    CAL_ACC1_YOFF: f32,
    CAL_ACC1_ZOFF: f32,
    CAL_ACC1_XSCALE: f32,
    CAL_ACC1_YSCALE: f32,
    CAL_ACC1_ZSCALE: f32,
    CAL_GYRO2_ID: i32,
    CAL_GYRO2_XOFF: f32,
    CAL_GYRO2_YOFF: f32,
    CAL_GYRO2_ZOFF: f32,
    CAL_GYRO2_XSCALE: f32,
    CAL_GYRO2_YSCALE: f32,
    CAL_GYRO2_ZSCALE: f32,
    CAL_MAG2_ID: i32,
    CAL_MAG2_ROT: i32,
    CAL_MAG2_XOFF: f32,
    CAL_MAG2_YOFF: f32,
    CAL_MAG2_ZOFF: f32,
    CAL_MAG2_XSCALE: f32,
    CAL_MAG2_YSCALE: f32,
    CAL_MAG2_ZSCALE: f32,
    CAL_ACC2_ID: i32,
    CAL_ACC2_XOFF: f32,
    CAL_ACC2_YOFF: f32,
    CAL_ACC2_ZOFF: f32,
    CAL_ACC2_XSCALE: f32,
    CAL_ACC2_YSCALE: f32,
    CAL_ACC2_ZSCALE: f32,
    CAL_ACC_PRIME: i32,
    CAL_GYRO_PRIME: i32,
    CAL_MAG_PRIME: i32,
    CAL_MAG_SIDES: i32,
    CAL_BARO_PRIME: i32,
    SENS_DPRES_OFF: f32,
    SENS_DPRES_ANSC: f32,
    SENS_BARO_QNH: f32,
    SENS_BOARD_ROT: i32,
    SENS_FLOW_ROT: i32,
    SENS_BOARD_Y_OFF: f32,
    SENS_BOARD_X_OFF: f32,
    SENS_BOARD_Z_OFF: f32,
    SENS_EXT_MAG_ROT: i32,
    SENS_EXT_MAG: i32,
}

struct Sensor_Enable {
    SENS_EN_LL40LS: i32,
    SENS_EN_SF0X: i32,
    SENS_EN_MB12XX: i32,
    SENS_EN_TRONE: i32,
    SENS_EN_SF1XX: i32,
    SENS_EN_THERMAL: i32,
}

struct Snapdragon_UART_ESC {
    UART_ESC_MODEL: i32,
    UART_ESC_BAUD: i32,
    UART_ESC_MOTOR1: i32,
    UART_ESC_MOTOR2: i32,
    UART_ESC_MOTOR3: i32,
    UART_ESC_MOTOR4: i32,
}

struct Subscriber_Example {
    SUB_INTERV: i32,
    SUB_TESTF: f32,
}

struct Syslink {
    SLNK_RADIO_CHAN: i32,
    SLNK_RADIO_RATE: i32,
    SLNK_RADIO_ADDR1: i32,
    SLNK_RADIO_ADDR2: i32,
}

struct System {
    SYS_AUTOSTART: i32,
    SYS_AUTOCONFIG: i32,
    SYS_USE_IO: i32,
    SYS_RESTART_TYPE: i32,
    SYS_MC_EST_GROUP: i32,
    SYS_COMPANION: i32,
    SYS_PARAM_VER: i32,
    SYS_LOGGER: i32,
    LED_RGB_MAXBRT: i32,
}

struct Testing {
    TEST_MIN: f32,
    TEST_MAX: f32,
    TEST_TRIM: f32,
    TEST_HP: f32,
    TEST_LP: f32,
    TEST_P: f32,
    TEST_I: f32,
    TEST_I_MAX: f32,
    TEST_D: f32,
    TEST_D_LP: f32,
    TEST_MEAN: f32,
    TEST_DEV: f32,
    TEST_PARAMS: i32,
}

struct UAVCAN {
    UAVCAN_ENABLE: i32,
    UAVCAN_NODE_ID: i32,
    UAVCAN_BITRATE: i32,
    UAVCAN_ESC_IDLT: i32,
}

struct VTOL_Attitude_Control {
    VT_TRANS_THR: f32,
    VT_DWN_PITCH_MAX: f32,
    VT_FWD_THRUST_SC: f32,
    VT_MOT_COUNT: i32,
    VT_IDLE_PWM_MC: i32,
    VT_MC_ARSPD_MIN: f32,
    VT_MC_ARSPD_MAX: f32,
    VT_MC_ARSPD_TRIM: f32,
    VT_FW_PERM_STAB: i32,
    VT_FW_PITCH_TRIM: f32,
    VT_POWER_MAX: f32,
    VT_PROP_EFF: f32,
    VT_ARSP_LP_GAIN: f32,
    VT_TYPE: i32,
    VT_ELEV_MC_LOCK: i32,
    VT_F_TRANS_DUR: f32,
    VT_B_TRANS_DUR: f32,
    VT_ARSP_BLEND: f32,
    VT_ARSP_TRANS: f32,
    VT_OPT_RECOV_EN: i32,
    VT_WV_YAWR_SCL: f32,
    VT_TRANS_TIMEOUT: f32,
    VT_TRANS_MIN_TM: f32,
    VT_NAV_FORCE_VT: i32,
    VT_FW_MIN_ALT: f32,
    VT_TILT_MC: f32,
    VT_TILT_TRANS: f32,
    VT_TILT_FW: f32,
    VT_TRANS_P2_DUR: f32,
    VT_FW_MOT_OFFID: i32,
}

struct MTECS {
    MT_ENABLED: i32,
    MT_THR_FF: f32,
    MT_THR_P: f32,
    MT_THR_I: f32,
    MT_THR_OFF: f32,
    MT_PIT_FF: f32,
    MT_PIT_P: f32,
    MT_PIT_I: f32,
    MT_PIT_OFF: f32,
    MT_THR_MIN: f32,
    MT_THR_MAX: f32,
    MT_PIT_MIN: f32,
    MT_PIT_MAX: f32,
    MT_ALT_LP: f32,
    MT_FPA_LP: f32,
    MT_FPA_P: f32,
    MT_FPA_D: f32,
    MT_FPA_D_LP: f32,
    MT_FPA_MIN: f32,
    MT_FPA_MAX: f32,
    MT_A_LP: f32,
    MT_AD_LP: f32,
    MT_ACC_P: f32,
    MT_ACC_D: f32,
    MT_ACC_D_LP: f32,
    MT_ACC_MIN: f32,
    MT_ACC_MAX: f32,
    MT_TKF_THR_MIN: f32,
    MT_TKF_THR_MAX: f32,
    MT_TKF_PIT_MIN: f32,
    MT_TKF_PIT_MAX: f32,
    MT_USP_THR_MIN: f32,
    MT_USP_THR_MAX: f32,
    MT_USP_PIT_MIN: f32,
    MT_USP_PIT_MAX: f32,
    MT_LND_THR_MIN: f32,
    MT_LND_THR_MAX: f32,
    MT_LND_PIT_MIN: f32,
    MT_LND_PIT_MAX: f32,
    MT_THR_I_MAX: f32,
    MT_PIT_I_MAX: f32,
}

struct Miscellaneous {
    RC_MAP_FAILSAFE: i32,
    SEG_TH2V_P: f32,
    SEG_TH2V_I: f32,
    SEG_TH2V_I_MAX: f32,
    SEG_Q2V: f32,
    COM_FLTMODE1: i32,
    COM_FLTMODE2: i32,
    COM_FLTMODE3: i32,
    COM_FLTMODE4: i32,
    COM_FLTMODE5: i32,
    COM_FLTMODE6: i32,
    RV_YAW_P: f32,
    EXFW_HDNG_P: f32,
    EXFW_ROLL_P: f32,
    EXFW_PITCH_P: f32,
}

component {
    parameters {
        inited: bool,
        _UAVCAN_Motor_Parameters: UAVCAN_Motor_Parameters,
        _Attitude_EKF_estimator: Attitude_EKF_estimator,
        _Attitude_Q_estimator: Attitude_Q_estimator,
        _Battery_Calibration: Battery_Calibration,
        _Camera_trigger: Camera_trigger,
        _Circuit_Breaker: Circuit_Breaker,
        _Commander: Commander,
        _Data_Link_Loss: Data_Link_Loss,
        _EKF2: EKF2,
        _FW_Attitude_Control: FW_Attitude_Control,
        _FW_L1_Control: FW_L1_Control,
        _FW_TECS: FW_TECS,
        _Follow_target: Follow_target,
        _GPS: GPS,
        _GPS_Failure_Navigation: GPS_Failure_Navigation,
        _Geofence: Geofence,
        _Land_Detector: Land_Detector,
        _Launch_detection: Launch_detection,
        _Local_Position_Estimator: Local_Position_Estimator,
        _MAVLink: MAVLink,
        _MKBLCTRL_Testmode: MKBLCTRL_Testmode,
        _MPU9x50_Configuration: MPU9x50_Configuration,
        _Mission: Mission,
        _Mount: Mount,
        _Multicopter_Attitude_Control: Multicopter_Attitude_Control,
        _Multicopter_Position_Control: Multicopter_Position_Control,
        _PWM_Outputs: PWM_Outputs,
        _Payload_drop: Payload_drop,
        _Position_Estimator: Position_Estimator,
        _Position_Estimator_INAV: Position_Estimator_INAV,
        _RC_Receiver_Configuration: RC_Receiver_Configuration,
        _Radio_Calibration: Radio_Calibration,
        _Radio_Signal_Loss: Radio_Signal_Loss,
        _Radio_Switches: Radio_Switches,
        _Return_To_Land: Return_To_Land,
        _Runway_Takeoff: Runway_Takeoff,
        _SD_Logging: SD_Logging,
        _Sensor_Calibration: Sensor_Calibration,
        _Sensor_Enable: Sensor_Enable,
        _Snapdragon_UART_ESC: Snapdragon_UART_ESC,
        _Subscriber_Example: Subscriber_Example,
        _Syslink: Syslink,
        _System: System,
        _Testing: Testing,
        _UAVCAN: UAVCAN,
        _VTOL_Attitude_Control: VTOL_Attitude_Control,
        _MTECS: MTECS,
        _Miscellaneous: Miscellaneous,
    }

    impl {
        fn init()
    }

    statuses {
        [UAVCAN_Motor_Parameters, 0, false]: _UAVCAN_Motor_Parameters,
        [Attitude_EKF_estimator, 0, false]: _Attitude_EKF_estimator,
        [Attitude_Q_estimator, 0, false]: _Attitude_Q_estimator,
        [Battery_Calibration, 0, false]: _Battery_Calibration,
        [Camera_trigger, 0, false]: _Camera_trigger,
        [Circuit_Breaker, 0, false]: _Circuit_Breaker,
        [Commander, 0, false]: _Commander,
        [Data_Link_Loss, 0, false]: _Data_Link_Loss,
        [EKF2, 0, false]: _EKF2,
        [FW_Attitude_Control, 0, false]: _FW_Attitude_Control,
        [FW_L1_Control, 0, false]: _FW_L1_Control,
        [FW_TECS, 0, false]: _FW_TECS,
        [Follow_target, 0, false]: _Follow_target,
        [GPS, 0, false]: _GPS,
        [GPS_Failure_Navigation, 0, false]: _GPS_Failure_Navigation,
        [Geofence, 0, false]: _Geofence,
        [Land_Detector, 0, false]: _Land_Detector,
        [Launch_detection, 0, false]: _Launch_detection,
        [Local_Position_Estimator, 0, false]: _Local_Position_Estimator,
        [MAVLink, 0, false]: _MAVLink,
        [MKBLCTRL_Testmode, 0, false]: _MKBLCTRL_Testmode,
        [MPU9x50_Configuration, 0, false]: _MPU9x50_Configuration,
        [Mission, 0, false]: _Mission,
        [Mount, 0, false]: _Mount,
        [Multicopter_Attitude_Control, 0, false]: _Multicopter_Attitude_Control,
        [Multicopter_Position_Control, 0, false]: _Multicopter_Position_Control,
        [PWM_Outputs, 0, false]: _PWM_Outputs,
        [Payload_drop, 0, false]: _Payload_drop,
        [Position_Estimator, 0, false]: _Position_Estimator,
        [Position_Estimator_INAV, 0, false]: _Position_Estimator_INAV,
        [RC_Receiver_Configuration, 0, false]: _RC_Receiver_Configuration,
        [Radio_Calibration, 0, false]: _Radio_Calibration,
        [Radio_Signal_Loss, 0, false]: _Radio_Signal_Loss,
        [Radio_Switches, 0, false]: _Radio_Switches,
        [Return_To_Land, 0, false]: _Return_To_Land,
        [Runway_Takeoff, 0, false]: _Runway_Takeoff,
        [SD_Logging, 0, false]: _SD_Logging,
        [Sensor_Calibration, 0, false]: _Sensor_Calibration,
        [Sensor_Enable, 0, false]: _Sensor_Enable,
        [Snapdragon_UART_ESC, 0, false]: _Snapdragon_UART_ESC,
        [Subscriber_Example, 0, false]: _Subscriber_Example,
        [Syslink, 0, false]: _Syslink,
        [System, 0, false]: _System,
        [Testing, 0, false]: _Testing,
        [UAVCAN, 0, false]: _UAVCAN,
        [VTOL_Attitude_Control, 0, false]: _VTOL_Attitude_Control,
        [MTECS, 0, false]: _MTECS,
        [Miscellaneous, 0, false]: _Miscellaneous,
    }

    commands {
        fn setParam(name: [i8; 16], value: u32)
    }
}
