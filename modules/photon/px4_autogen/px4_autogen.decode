module px4_autogen

import core::{Error}

struct Attitude_Q_estimator {
    ATT_W_ACC: f32,
    ATT_W_MAG: f32,
    ATT_W_EXT_HDG: f32,
    ATT_W_GYRO_BIAS: f32,
    ATT_MAG_DECL: f32,
    ATT_MAG_DECL_A: i32,
    ATT_EXT_HDG_M: i32,
    ATT_ACC_COMP: i32,
    ATT_BIAS_MAX: f32,
    ATT_VIBE_THRESH: f32,
}

struct Battery_Calibration {
    BAT_V_EMPTY: f32,
    BAT_V_CHARGED: f32,
    BAT_LOW_THR: f32,
    BAT_CRIT_THR: f32,
    BAT_V_LOAD_DROP: f32,
    BAT_R_INTERNAL: f32,
    BAT_N_CELLS: i32,
    BAT_CAPACITY: f32,
    BAT_V_SCALE_IO: i32,
    BAT_CNT_V_VOLT: f32,
    BAT_CNT_V_CURR: f32,
    BAT_V_OFFS_CURR: f32,
    BAT_V_DIV: f32,
    BAT_A_PER_V: f32,
    BAT_SOURCE: i32,
}

struct Camera_trigger {
    TRIG_MODE: i32,
}

struct Circuit_Breaker {
    CBRK_SUPPLY_CHK: i32,
    CBRK_RATE_CTRL: i32,
    CBRK_IO_SAFETY: i32,
    CBRK_AIRSPD_CHK: i32,
    CBRK_FLIGHTTERM: i32,
    CBRK_ENGINEFAIL: i32,
    CBRK_GPSFAIL: i32,
    CBRK_BUZZER: i32,
    CBRK_USB_CHK: i32,
}

struct Commander {
    COM_DL_LOSS_T: i32,
    COM_DL_REG_T: i32,
    COM_EF_THROT: f32,
    COM_EF_C2T: f32,
    COM_EF_TIME: f32,
    COM_RC_LOSS_T: f32,
    COM_HOME_H_T: f32,
    COM_HOME_V_T: f32,
    COM_AUTOS_PAR: i32,
    COM_RC_IN_MODE: i32,
    COM_RC_ARM_HYST: i32,
    COM_DISARM_LAND: i32,
    COM_ARM_WO_GPS: i32,
    COM_LOW_BAT_ACT: i32,
    COM_OF_LOSS_T: f32,
    COM_ARM_EKF_POS: f32,
    COM_ARM_EKF_VEL: f32,
    COM_ARM_EKF_HGT: f32,
    COM_ARM_EKF_YAW: f32,
    COM_ARM_EKF_AB: f32,
    COM_ARM_EKF_GB: f32,
    COM_ARM_IMU_ACC: f32,
    COM_ARM_IMU_GYR: f32,
}

struct Data_Link_Loss {
    NAV_AH_LAT: i32,
    NAV_AH_LON: i32,
    NAV_AH_ALT: f32,
    NAV_DLL_CH_T: f32,
    NAV_DLL_CH_LAT: i32,
    NAV_DLL_CH_LON: i32,
    NAV_DLL_CH_ALT: f32,
    NAV_DLL_AH_T: f32,
    NAV_DLL_N: i32,
    NAV_DLL_CHSK: i32,
}

struct FW_TECS {
    FW_AIRSPD_TRIM: f32,
}

struct Follow_target {
    NAV_MIN_FT_HT: f32,
    NAV_FT_DST: f32,
    NAV_FT_FS: i32,
    NAV_FT_RS: f32,
}

struct GPS {
    GPS_DUMP_COMM: i32,
}

struct GPS_Failure_Navigation {
    NAV_GPSF_LT: f32,
    NAV_GPSF_R: f32,
    NAV_GPSF_P: f32,
    NAV_GPSF_TR: f32,
}

struct Geofence {
    GF_ACTION: i32,
    GF_ALTMODE: i32,
    GF_SOURCE: i32,
    GF_COUNT: i32,
    GF_MAX_HOR_DIST: f32,
    GF_MAX_VER_DIST: f32,
}

struct Land_Detector {
    LNDMC_Z_VEL_MAX: f32,
    LNDMC_XY_VEL_MAX: f32,
    LNDMC_ROT_MAX: f32,
    LNDMC_FFALL_THR: f32,
    LNDMC_FFALL_TTRI: f32,
}

struct Local_Position_Estimator {
    LPE_PUB_AGL_Z: f32,
    LPE_FLW_OFF_Z: f32,
    LPE_FLW_SCALE: f32,
    LPE_FLW_GYRO_CMP: i32,
    LPE_FLW_QMIN: i32,
    LPE_SNR_Z: f32,
    LPE_SNR_OFF_Z: f32,
    LPE_LDR_Z: f32,
    LPE_LDR_OFF_Z: f32,
    LPE_ACC_XY: f32,
    LPE_ACC_Z: f32,
    LPE_BAR_Z: f32,
    LPE_GPS_ON: i32,
    LPE_GPS_DELAY: f32,
    LPE_GPS_XY: f32,
    LPE_GPS_Z: f32,
    LPE_GPS_VXY: f32,
    LPE_GPS_VZ: f32,
    LPE_EPH_MAX: f32,
    LPE_EPV_MAX: f32,
    LPE_VIS_DELAY: f32,
    LPE_VIS_XY: f32,
    LPE_VIS_Z: f32,
    LPE_VIS_ON: i32,
    LPE_VIC_P: f32,
    LPE_PN_P: f32,
    LPE_PN_V: f32,
    LPE_PN_B: f32,
    LPE_PN_T: f32,
    LPE_T_MAX_GRADE: f32,
    LPE_FGYRO_HP: f32,
    LPE_LAT: f32,
    LPE_LON: f32,
    LPE_X_LP: f32,
    LPE_VXY_PUB: f32,
    LPE_Z_PUB: f32,
    LPE_LAND_Z: f32,
}

struct MAVLink {
    MAV_SYS_ID: i32,
    MAV_COMP_ID: i32,
    MAV_PROTO_VER: i32,
    MAV_RADIO_ID: i32,
    MAV_TYPE: i32,
    MAV_USEHILGPS: i32,
    MAV_FWDEXTSP: i32,
    MAV_BROADCAST: i32,
    MAV_TEST_PAR: i32,
}

struct Mission {
    COM_OBL_ACT: i32,
    COM_OBL_RC_ACT: i32,
    NAV_LOITER_RAD: f32,
    NAV_ACC_RAD: f32,
    NAV_FW_ALT_RAD: f32,
    NAV_MC_ALT_RAD: f32,
    NAV_DLL_ACT: i32,
    NAV_RCL_ACT: i32,
    MIS_TAKEOFF_ALT: f32,
    MIS_LTRMIN_ALT: f32,
    MIS_ONBOARD_EN: i32,
    MIS_DIST_1WP: f32,
    MIS_ALTMODE: i32,
    MIS_YAWMODE: i32,
    MIS_YAW_TMT: f32,
    MIS_YAW_ERR: f32,
    VT_WV_LND_EN: i32,
    VT_WV_LTR_EN: i32,
}

struct Multicopter_Attitude_Control {
    MC_ROLL_TC: f32,
    MC_PITCH_TC: f32,
    MC_ROLL_P: f32,
    MC_ROLLRATE_P: f32,
    MC_ROLLRATE_I: f32,
    MC_ROLLRATE_D: f32,
    MC_ROLLRATE_FF: f32,
    MC_PITCH_P: f32,
    MC_PITCHRATE_P: f32,
    MC_PITCHRATE_I: f32,
    MC_PITCHRATE_D: f32,
    MC_PITCHRATE_FF: f32,
    MC_YAW_P: f32,
    MC_YAWRATE_P: f32,
    MC_YAWRATE_I: f32,
    MC_YAWRATE_D: f32,
    MC_YAWRATE_FF: f32,
    MC_YAW_FF: f32,
    MC_ROLLRATE_MAX: f32,
    MC_PITCHRATE_MAX: f32,
    MC_YAWRATE_MAX: f32,
    MC_YAWRAUTO_MAX: f32,
    MC_ACRO_R_MAX: f32,
    MC_ACRO_P_MAX: f32,
    MC_ACRO_Y_MAX: f32,
    MC_RATT_TH: f32,
    MC_TPA_BREAK: f32,
    MC_TPA_SLOPE: f32,
    MC_BAT_SCALE_EN: i32,
}

struct Multicopter_Position_Control {
    MPC_THR_MIN: f32,
    MPC_THR_HOVER: f32,
    MPC_ALTCTL_DZ: f32,
    MPC_ALTCTL_DY: f32,
    MPC_THR_MAX: f32,
    MPC_MANTHR_MIN: f32,
    MPC_MANTHR_MAX: f32,
    MPC_Z_P: f32,
    MPC_Z_VEL_P: f32,
    MPC_Z_VEL_I: f32,
    MPC_Z_VEL_D: f32,
    MPC_Z_VEL_MAX_UP: f32,
    MPC_Z_VEL_MAX: f32,
    MPC_Z_VEL_MAX_DN: f32,
    MPC_Z_FF: f32,
    MPC_XY_P: f32,
    MPC_XY_VEL_P: f32,
    MPC_XY_VEL_I: f32,
    MPC_XY_VEL_D: f32,
    MPC_XY_CRUISE: f32,
    MPC_XY_VEL_MAX: f32,
    MPC_XY_FF: f32,
    MPC_TILTMAX_AIR: f32,
    MPC_TILTMAX_LND: f32,
    MPC_LAND_SPEED: f32,
    MPC_TKO_SPEED: f32,
    MPC_MAN_R_MAX: f32,
    MPC_MAN_P_MAX: f32,
    MPC_MAN_Y_MAX: f32,
    MPC_HOLD_XY_DZ: f32,
    MPC_HOLD_MAX_XY: f32,
    MPC_HOLD_MAX_Z: f32,
    MPC_VELD_LP: f32,
    MPC_ACC_HOR_MAX: f32,
    MPC_ALT_MODE: i32,
}

struct PWM_Outputs {
    PWM_RATE: i32,
    PWM_MIN: i32,
    PWM_MAX: i32,
    PWM_DISARMED: i32,
    PWM_AUX_MIN: i32,
    PWM_AUX_MAX: i32,
    PWM_AUX_DISARMED: i32,
    MOT_SLEW_MAX: f32,
    PWM_MAIN_REV1: i32,
    PWM_MAIN_REV2: i32,
    PWM_MAIN_REV3: i32,
    PWM_MAIN_REV4: i32,
    PWM_MAIN_REV5: i32,
    PWM_MAIN_REV6: i32,
    PWM_MAIN_REV7: i32,
    PWM_MAIN_REV8: i32,
    PWM_SBUS_MODE: i32,
    PWM_AUX_REV1: i32,
    PWM_AUX_REV2: i32,
    PWM_AUX_REV3: i32,
    PWM_AUX_REV4: i32,
    PWM_AUX_REV5: i32,
    PWM_AUX_REV6: i32,
}

struct Radio_Calibration {
    RC1_MIN: f32,
    RC1_TRIM: f32,
    RC1_MAX: f32,
    RC1_REV: f32,
    RC1_DZ: f32,
    RC2_MIN: f32,
    RC2_TRIM: f32,
    RC2_MAX: f32,
    RC2_REV: f32,
    RC2_DZ: f32,
    RC3_MIN: f32,
    RC3_TRIM: f32,
    RC3_MAX: f32,
    RC3_REV: f32,
    RC3_DZ: f32,
    RC4_MIN: f32,
    RC4_TRIM: f32,
    RC4_MAX: f32,
    RC4_REV: f32,
    RC4_DZ: f32,
    RC5_MIN: f32,
    RC5_TRIM: f32,
    RC5_MAX: f32,
    RC5_REV: f32,
    RC5_DZ: f32,
    RC6_MIN: f32,
    RC6_TRIM: f32,
    RC6_MAX: f32,
    RC6_REV: f32,
    RC6_DZ: f32,
    RC7_MIN: f32,
    RC7_TRIM: f32,
    RC7_MAX: f32,
    RC7_REV: f32,
    RC7_DZ: f32,
    RC8_MIN: f32,
    RC8_TRIM: f32,
    RC8_MAX: f32,
    RC8_REV: f32,
    RC8_DZ: f32,
    RC9_MIN: f32,
    RC9_TRIM: f32,
    RC9_MAX: f32,
    RC9_REV: f32,
    RC9_DZ: f32,
    RC10_MIN: f32,
    RC10_TRIM: f32,
    RC10_MAX: f32,
    RC10_REV: f32,
    RC10_DZ: f32,
    RC11_MIN: f32,
    RC11_TRIM: f32,
    RC11_MAX: f32,
    RC11_REV: f32,
    RC11_DZ: f32,
    RC12_MIN: f32,
    RC12_TRIM: f32,
    RC12_MAX: f32,
    RC12_REV: f32,
    RC12_DZ: f32,
    RC13_MIN: f32,
    RC13_TRIM: f32,
    RC13_MAX: f32,
    RC13_REV: f32,
    RC13_DZ: f32,
    RC14_MIN: f32,
    RC14_TRIM: f32,
    RC14_MAX: f32,
    RC14_REV: f32,
    RC14_DZ: f32,
    RC15_MIN: f32,
    RC15_TRIM: f32,
    RC15_MAX: f32,
    RC15_REV: f32,
    RC15_DZ: f32,
    RC16_MIN: f32,
    RC16_TRIM: f32,
    RC16_MAX: f32,
    RC16_REV: f32,
    RC16_DZ: f32,
    RC17_MIN: f32,
    RC17_TRIM: f32,
    RC17_MAX: f32,
    RC17_REV: f32,
    RC17_DZ: f32,
    RC18_MIN: f32,
    RC18_TRIM: f32,
    RC18_MAX: f32,
    RC18_REV: f32,
    RC18_DZ: f32,
    RC_DSM_BIND: i32,
    RC_CHAN_CNT: i32,
    RC_TH_USER: i32,
    RC_MAP_ROLL: i32,
    RC_MAP_PITCH: i32,
    RC_MAP_THROTTLE: i32,
    RC_MAP_YAW: i32,
    RC_MAP_AUX1: i32,
    RC_MAP_AUX2: i32,
    RC_MAP_AUX3: i32,
    RC_MAP_AUX4: i32,
    RC_MAP_AUX5: i32,
    RC_MAP_PARAM1: i32,
    RC_MAP_PARAM2: i32,
    RC_MAP_PARAM3: i32,
    RC_FAILS_THR: i32,
    RC_RSSI_PWM_CHAN: i32,
    RC_RSSI_PWM_MAX: i32,
    RC_RSSI_PWM_MIN: i32,
    TRIM_ROLL: f32,
    TRIM_PITCH: f32,
    TRIM_YAW: f32,
}

struct Radio_Signal_Loss {
    NAV_RCL_LT: f32,
}

struct Radio_Switches {
    RC_MAP_FLTMODE: i32,
    RC_MAP_MODE_SW: i32,
    RC_MAP_RETURN_SW: i32,
    RC_MAP_RATT_SW: i32,
    RC_MAP_POSCTL_SW: i32,
    RC_MAP_LOITER_SW: i32,
    RC_MAP_ACRO_SW: i32,
    RC_MAP_OFFB_SW: i32,
    RC_MAP_KILL_SW: i32,
    RC_MAP_FLAPS: i32,
    RC_MAP_TRANS_SW: i32,
    RC_MAP_GEAR_SW: i32,
    RC_ASSIST_TH: f32,
    RC_AUTO_TH: f32,
    RC_RATT_TH: f32,
    RC_POSCTL_TH: f32,
    RC_RETURN_TH: f32,
    RC_LOITER_TH: f32,
    RC_ACRO_TH: f32,
    RC_OFFB_TH: f32,
    RC_KILLSWITCH_TH: f32,
    RC_TRANS_TH: f32,
    RC_GEAR_TH: f32,
}

struct Return_To_Land {
    RTL_RETURN_ALT: f32,
    RTL_DESCEND_ALT: f32,
    RTL_LAND_DELAY: f32,
    RTL_MIN_DIST: f32,
}

struct SD_Logging {
    SDLOG_UTC_OFFSET: i32,
    SDLOG_MODE: i32,
}

struct Sensor_Calibration {
    CAL_GYRO0_ID: i32,
    CAL_GYRO0_XOFF: f32,
    CAL_GYRO0_YOFF: f32,
    CAL_GYRO0_ZOFF: f32,
    CAL_GYRO0_XSCALE: f32,
    CAL_GYRO0_YSCALE: f32,
    CAL_GYRO0_ZSCALE: f32,
    CAL_MAG0_ID: i32,
    CAL_MAG0_ROT: i32,
    CAL_MAG0_XOFF: f32,
    CAL_MAG0_YOFF: f32,
    CAL_MAG0_ZOFF: f32,
    CAL_MAG0_XSCALE: f32,
    CAL_MAG0_YSCALE: f32,
    CAL_MAG0_ZSCALE: f32,
    CAL_ACC0_ID: i32,
    CAL_ACC0_XOFF: f32,
    CAL_ACC0_YOFF: f32,
    CAL_ACC0_ZOFF: f32,
    CAL_ACC0_XSCALE: f32,
    CAL_ACC0_YSCALE: f32,
    CAL_ACC0_ZSCALE: f32,
    CAL_GYRO1_ID: i32,
    CAL_GYRO1_XOFF: f32,
    CAL_GYRO1_YOFF: f32,
    CAL_GYRO1_ZOFF: f32,
    CAL_GYRO1_XSCALE: f32,
    CAL_GYRO1_YSCALE: f32,
    CAL_GYRO1_ZSCALE: f32,
    CAL_MAG1_ID: i32,
    CAL_MAG1_ROT: i32,
    CAL_MAG1_XOFF: f32,
    CAL_MAG1_YOFF: f32,
    CAL_MAG1_ZOFF: f32,
    CAL_MAG1_XSCALE: f32,
    CAL_MAG1_YSCALE: f32,
    CAL_MAG1_ZSCALE: f32,
    CAL_ACC1_ID: i32,
    CAL_ACC1_XOFF: f32,
    CAL_ACC1_YOFF: f32,
    CAL_ACC1_ZOFF: f32,
    CAL_ACC1_XSCALE: f32,
    CAL_ACC1_YSCALE: f32,
    CAL_ACC1_ZSCALE: f32,
    CAL_GYRO2_ID: i32,
    CAL_GYRO2_XOFF: f32,
    CAL_GYRO2_YOFF: f32,
    CAL_GYRO2_ZOFF: f32,
    CAL_GYRO2_XSCALE: f32,
    CAL_GYRO2_YSCALE: f32,
    CAL_GYRO2_ZSCALE: f32,
    CAL_MAG2_ID: i32,
    CAL_MAG2_ROT: i32,
    CAL_MAG2_XOFF: f32,
    CAL_MAG2_YOFF: f32,
    CAL_MAG2_ZOFF: f32,
    CAL_MAG2_XSCALE: f32,
    CAL_MAG2_YSCALE: f32,
    CAL_MAG2_ZSCALE: f32,
    CAL_ACC2_ID: i32,
    CAL_ACC2_XOFF: f32,
    CAL_ACC2_YOFF: f32,
    CAL_ACC2_ZOFF: f32,
    CAL_ACC2_XSCALE: f32,
    CAL_ACC2_YSCALE: f32,
    CAL_ACC2_ZSCALE: f32,
    CAL_ACC_PRIME: i32,
    CAL_GYRO_PRIME: i32,
    CAL_MAG_PRIME: i32,
    CAL_MAG_SIDES: i32,
    CAL_BARO_PRIME: i32,
    SENS_DPRES_OFF: f32,
    SENS_DPRES_ANSC: f32,
    SENS_BARO_QNH: f32,
    SENS_BOARD_ROT: i32,
    SENS_BOARD_Y_OFF: f32,
    SENS_BOARD_X_OFF: f32,
    SENS_BOARD_Z_OFF: f32,
}

struct Sensor_Enable {
    SENS_EN_LL40LS: i32,
    SENS_EN_SF0X: i32,
    SENS_EN_MB12XX: i32,
    SENS_EN_TRONE: i32,
    SENS_EN_SF1XX: i32,
    SENS_EN_THERMAL: i32,
}

struct System {
    SYS_AUTOSTART: i32,
    SYS_AUTOCONFIG: i32,
    SYS_USE_IO: i32,
    SYS_RESTART_TYPE: i32,
    SYS_MC_EST_GROUP: i32,
    SYS_COMPANION: i32,
    SYS_PARAM_VER: i32,
    SYS_LOGGER: i32,
}

struct UAVCAN {
    UAVCAN_ENABLE: i32,
}

struct Miscellaneous {
    RC_MAP_FAILSAFE: i32,
    COM_FLTMODE1: i32,
    COM_FLTMODE2: i32,
    COM_FLTMODE3: i32,
    COM_FLTMODE4: i32,
    COM_FLTMODE5: i32,
    COM_FLTMODE6: i32,
}

component {
    variables {
        inited: bool,
        _Attitude_Q_estimator: Attitude_Q_estimator,
        _Battery_Calibration: Battery_Calibration,
        _Camera_trigger: Camera_trigger,
        _Circuit_Breaker: Circuit_Breaker,
        _Commander: Commander,
        _Data_Link_Loss: Data_Link_Loss,
        _FW_TECS: FW_TECS,
        _Follow_target: Follow_target,
        _GPS: GPS,
        _GPS_Failure_Navigation: GPS_Failure_Navigation,
        _Geofence: Geofence,
        _Land_Detector: Land_Detector,
        _Local_Position_Estimator: Local_Position_Estimator,
        _MAVLink: MAVLink,
        _Mission: Mission,
        _Multicopter_Attitude_Control: Multicopter_Attitude_Control,
        _Multicopter_Position_Control: Multicopter_Position_Control,
        _PWM_Outputs: PWM_Outputs,
        _Radio_Calibration: Radio_Calibration,
        _Radio_Signal_Loss: Radio_Signal_Loss,
        _Radio_Switches: Radio_Switches,
        _Return_To_Land: Return_To_Land,
        _SD_Logging: SD_Logging,
        _Sensor_Calibration: Sensor_Calibration,
        _Sensor_Enable: Sensor_Enable,
        _System: System,
        _UAVCAN: UAVCAN,
        _Miscellaneous: Miscellaneous,
    }

    statuses {
        [global, 0, true]: { inited },
        [Attitude_Q_estimator, 0, false]: _Attitude_Q_estimator,
        [Battery_Calibration, 0, false]: _Battery_Calibration,
        [Camera_trigger, 0, false]: _Camera_trigger,
        [Circuit_Breaker, 0, false]: _Circuit_Breaker,
        [Commander, 0, false]: _Commander,
        [Data_Link_Loss, 0, false]: _Data_Link_Loss,
        [FW_TECS, 0, false]: _FW_TECS,
        [Follow_target, 0, false]: _Follow_target,
        [GPS, 0, false]: _GPS,
        [GPS_Failure_Navigation, 0, false]: _GPS_Failure_Navigation,
        [Geofence, 0, false]: _Geofence,
        [Land_Detector, 0, false]: _Land_Detector,
        [Local_Position_Estimator, 0, false]: _Local_Position_Estimator,
        [MAVLink, 0, false]: _MAVLink,
        [Mission, 0, false]: _Mission,
        [Multicopter_Attitude_Control, 0, false]: _Multicopter_Attitude_Control,
        [Multicopter_Position_Control, 0, false]: _Multicopter_Position_Control,
        [PWM_Outputs, 0, false]: _PWM_Outputs,
        [Radio_Calibration, 0, false]: _Radio_Calibration,
        [Radio_Signal_Loss, 0, false]: _Radio_Signal_Loss,
        [Radio_Switches, 0, false]: _Radio_Switches,
        [Return_To_Land, 0, false]: _Return_To_Land,
        [SD_Logging, 0, false]: _SD_Logging,
        [Sensor_Calibration, 0, false]: _Sensor_Calibration,
        [Sensor_Enable, 0, false]: _Sensor_Enable,
        [System, 0, false]: _System,
        [UAVCAN, 0, false]: _UAVCAN,
        [Miscellaneous, 0, false]: _Miscellaneous,
    }

    impl {
        fn init()
        fn initParam(name: *const char, callback: &Fn(u32))
        fn setParam(name: *const char, value: u32)
    }

    commands {
        fn updateFcuParams()
        fn requestAllParams()
        fn requestParam(name: *const char)
    }
}
