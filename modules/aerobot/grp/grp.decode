module grp

import core::{Reader, Writer, Error, Option}

type UavId = varuint;
type TermId = varuint;
type GrpId = varuint;

struct ReqVoteRep {
    term: TermId,
    vote: Option<bool>
}

struct ReqAppendEntryRep {
    term: TermId,
    success: bool,
    currentIdx: varuint,
    firstIdx: varuint
}

enum ReqErr {
    NotLeader = 1,
    NodeUnknown = 2,
    OneVotingChangeOnly = 3,
    Unknown = 4,
}

struct ReqCfgRep {
    err: Option<ReqErr>,
    term: TermId,
    id: varuint,
    idx: varuint
}

enum MemberState {
    Leader = 0,
    Candidate = 1,
    Follower = 2,
}


component {
    parameters {
        group: GrpId,
        members: &[UavId; 10],
        leader: Option<UavId>,
        state: MemberState,
        term: TermId,
        commit: varuint,
        votedFor: Option<UavId>,
    }

    impl {
        fn init()
        fn tick()
    }

    commands {
        fn setGroupAddress(address: varuint)
        fn addMember(group: GrpId, member: UavId) -> ReqCfgRep
        fn removeMember(group: GrpId, member: UavId) -> ReqCfgRep

        fn reqVote(term: TermId, lastLogIdx: varuint, lastLogTerm: TermId) -> ReqVoteRep
        fn reqAppendEntry(term: TermId, prevLogIdx: varuint, prevLogTerm: TermId, leaderCommit: varuint, entry: varuint) -> ReqAppendEntryRep
    }
}
